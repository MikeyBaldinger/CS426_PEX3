/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;
using System.IO;
using CS426.node;
using CS426.lexer;
using CS426.analysis;

namespace CS426.parser {

public class ParserException : ApplicationException
{
    Token token;

    public ParserException(Token token, String  message) : base(message)
    {
        this.token = token;
    }

    public Token Token
    {
      get { return token; }
    }
}

internal class State
{
    internal int state;
    internal ArrayList nodes;

    internal State(int state, ArrayList nodes)
    {
        this.state = state;
        this.nodes = nodes;
    }
}

internal class TokenIndex : AnalysisAdapter
{
    internal int index;

    public override void CaseTAssign(TAssign node)
    {
        index = 0;
    }

    public override void CaseTPlus(TPlus node)
    {
        index = 1;
    }

    public override void CaseTMinus(TMinus node)
    {
        index = 2;
    }

    public override void CaseTMult(TMult node)
    {
        index = 3;
    }

    public override void CaseTDiv(TDiv node)
    {
        index = 4;
    }

    public override void CaseTAnd(TAnd node)
    {
        index = 5;
    }

    public override void CaseTOr(TOr node)
    {
        index = 6;
    }

    public override void CaseTNot(TNot node)
    {
        index = 7;
    }

    public override void CaseTEqual(TEqual node)
    {
        index = 8;
    }

    public override void CaseTGreateq(TGreateq node)
    {
        index = 9;
    }

    public override void CaseTLesseq(TLesseq node)
    {
        index = 10;
    }

    public override void CaseTGreater(TGreater node)
    {
        index = 11;
    }

    public override void CaseTLess(TLess node)
    {
        index = 12;
    }

    public override void CaseTEol(TEol node)
    {
        index = 13;
    }

    public override void CaseTOpenpar(TOpenpar node)
    {
        index = 14;
    }

    public override void CaseTClosepar(TClosepar node)
    {
        index = 15;
    }

    public override void CaseTOpenbrace(TOpenbrace node)
    {
        index = 16;
    }

    public override void CaseTClosebrace(TClosebrace node)
    {
        index = 17;
    }

    public override void CaseTComma(TComma node)
    {
        index = 18;
    }

    public override void CaseTFunc(TFunc node)
    {
        index = 19;
    }

    public override void CaseTWhile(TWhile node)
    {
        index = 20;
    }

    public override void CaseTIf(TIf node)
    {
        index = 21;
    }

    public override void CaseTElse(TElse node)
    {
        index = 22;
    }

    public override void CaseTConst(TConst node)
    {
        index = 23;
    }

    public override void CaseTMain(TMain node)
    {
        index = 24;
    }

    public override void CaseTId(TId node)
    {
        index = 25;
    }

    public override void CaseTInteger(TInteger node)
    {
        index = 26;
    }

    public override void CaseTFloating(TFloating node)
    {
        index = 27;
    }

    public override void CaseTString(TString node)
    {
        index = 28;
    }

    public override void CaseEOF(EOF node)
    {
        index = 29;
    }
}

public class Parser
{
    private Analysis ignoredTokens = new AnalysisAdapter();
    public Analysis IgnoredTokens
    {
      get { return ignoredTokens; }
    }

    protected ArrayList nodeList;

    private Lexer lexer;
    private Stack stack = new Stack();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private TokenIndex converter = new TokenIndex();
    private int[] action = new int[2];

    private const int SHIFT = 0;
    private const int REDUCE = 1;
    private const int ACCEPT = 2;
    private const int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;
    }

    private int GoTo(int index)
    {
        int state = State();
        int low = 1;
        int high = gotoTable[index].Length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void Push(int numstate, ArrayList listNode)
    {
        this.nodeList = listNode;

        stack.Push(new State(numstate, this.nodeList));
    }

    private int State()
    {
        State s = (State) stack.Peek();
        return s.state;
    }

    private ArrayList Pop()
    {
        return (ArrayList) ((State) stack.Pop()).nodes;
    }

    private int Index(Switchable token)
    {
        converter.index = -1;
        token.Apply(converter);
        return converter.index;
    }

    public Start Parse()
    {
        Push(0, null);

        IList ign = null;
        while(true)
        {
            while(Index(lexer.Peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedList(NodeCast.Instance);
                }

                ign.Add(lexer.Next());
            }

            if(ign != null)
            {
                ignoredTokens.SetIn(lexer.Peek(), ign);
                ign = null;
            }

            last_pos = lexer.Peek().Pos;
            last_line = lexer.Peek().Line;
            last_token = lexer.Peek();

            int index = Index(lexer.Peek());
            action[0] = actionTable[State()][0][1];
            action[1] = actionTable[State()][0][2];

            int low = 1;
            int high = actionTable[State()].Length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[State()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[State()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[State()][middle][1];
                    action[1] = actionTable[State()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
        {
            ArrayList list = new ArrayList();
            list.Add(lexer.Next());
                        Push(action[1], list);
                        last_shift = action[1];
                    }
        break;
                case REDUCE:
                    switch(action[1])
                    {
                    case 0:
        {
      ArrayList list = New0();
      Push(GoTo(0), list);
        }
        break;
                    case 1:
        {
      ArrayList list = New1();
      Push(GoTo(1), list);
        }
        break;
                    case 2:
        {
      ArrayList list = New2();
      Push(GoTo(1), list);
        }
        break;
                    case 3:
        {
      ArrayList list = New3();
      Push(GoTo(2), list);
        }
        break;
                    case 4:
        {
      ArrayList list = New4();
      Push(GoTo(3), list);
        }
        break;
                    case 5:
        {
      ArrayList list = New5();
      Push(GoTo(3), list);
        }
        break;
                    case 6:
        {
      ArrayList list = New6();
      Push(GoTo(4), list);
        }
        break;
                    case 7:
        {
      ArrayList list = New7();
      Push(GoTo(5), list);
        }
        break;
                    case 8:
        {
      ArrayList list = New8();
      Push(GoTo(5), list);
        }
        break;
                    case 9:
        {
      ArrayList list = New9();
      Push(GoTo(5), list);
        }
        break;
                    case 10:
        {
      ArrayList list = New10();
      Push(GoTo(6), list);
        }
        break;
                    case 11:
        {
      ArrayList list = New11();
      Push(GoTo(7), list);
        }
        break;
                    case 12:
        {
      ArrayList list = New12();
      Push(GoTo(8), list);
        }
        break;
                    case 13:
        {
      ArrayList list = New13();
      Push(GoTo(8), list);
        }
        break;
                    case 14:
        {
      ArrayList list = New14();
      Push(GoTo(9), list);
        }
        break;
                    case 15:
        {
      ArrayList list = New15();
      Push(GoTo(9), list);
        }
        break;
                    case 16:
        {
      ArrayList list = New16();
      Push(GoTo(9), list);
        }
        break;
                    case 17:
        {
      ArrayList list = New17();
      Push(GoTo(9), list);
        }
        break;
                    case 18:
        {
      ArrayList list = New18();
      Push(GoTo(9), list);
        }
        break;
                    case 19:
        {
      ArrayList list = New19();
      Push(GoTo(10), list);
        }
        break;
                    case 20:
        {
      ArrayList list = New20();
      Push(GoTo(11), list);
        }
        break;
                    case 21:
        {
      ArrayList list = New21();
      Push(GoTo(12), list);
        }
        break;
                    case 22:
        {
      ArrayList list = New22();
      Push(GoTo(13), list);
        }
        break;
                    case 23:
        {
      ArrayList list = New23();
      Push(GoTo(13), list);
        }
        break;
                    case 24:
        {
      ArrayList list = New24();
      Push(GoTo(13), list);
        }
        break;
                    case 25:
        {
      ArrayList list = New25();
      Push(GoTo(14), list);
        }
        break;
                    case 26:
        {
      ArrayList list = New26();
      Push(GoTo(14), list);
        }
        break;
                    case 27:
        {
      ArrayList list = New27();
      Push(GoTo(15), list);
        }
        break;
                    case 28:
        {
      ArrayList list = New28();
      Push(GoTo(16), list);
        }
        break;
                    case 29:
        {
      ArrayList list = New29();
      Push(GoTo(16), list);
        }
        break;
                    case 30:
        {
      ArrayList list = New30();
      Push(GoTo(17), list);
        }
        break;
                    case 31:
        {
      ArrayList list = New31();
      Push(GoTo(18), list);
        }
        break;
                    case 32:
        {
      ArrayList list = New32();
      Push(GoTo(18), list);
        }
        break;
                    case 33:
        {
      ArrayList list = New33();
      Push(GoTo(18), list);
        }
        break;
                    case 34:
        {
      ArrayList list = New34();
      Push(GoTo(19), list);
        }
        break;
                    case 35:
        {
      ArrayList list = New35();
      Push(GoTo(20), list);
        }
        break;
                    case 36:
        {
      ArrayList list = New36();
      Push(GoTo(20), list);
        }
        break;
                    case 37:
        {
      ArrayList list = New37();
      Push(GoTo(20), list);
        }
        break;
                    case 38:
        {
      ArrayList list = New38();
      Push(GoTo(21), list);
        }
        break;
                    case 39:
        {
      ArrayList list = New39();
      Push(GoTo(21), list);
        }
        break;
                    case 40:
        {
      ArrayList list = New40();
      Push(GoTo(21), list);
        }
        break;
                    case 41:
        {
      ArrayList list = New41();
      Push(GoTo(21), list);
        }
        break;
                    case 42:
        {
      ArrayList list = New42();
      Push(GoTo(21), list);
        }
        break;
                    case 43:
        {
      ArrayList list = New43();
      Push(GoTo(21), list);
        }
        break;
                    case 44:
        {
      ArrayList list = New44();
      Push(GoTo(22), list);
        }
        break;
                    case 45:
        {
      ArrayList list = New45();
      Push(GoTo(22), list);
        }
        break;
                    case 46:
        {
      ArrayList list = New46();
      Push(GoTo(23), list);
        }
        break;
                    case 47:
        {
      ArrayList list = New47();
      Push(GoTo(23), list);
        }
        break;
                    case 48:
        {
      ArrayList list = New48();
      Push(GoTo(24), list);
        }
        break;
                    case 49:
        {
      ArrayList list = New49();
      Push(GoTo(24), list);
        }
        break;
                    case 50:
        {
      ArrayList list = New50();
      Push(GoTo(24), list);
        }
        break;
                    case 51:
        {
      ArrayList list = New51();
      Push(GoTo(25), list);
        }
        break;
                    case 52:
        {
      ArrayList list = New52();
      Push(GoTo(25), list);
        }
        break;
                    case 53:
        {
      ArrayList list = New53();
      Push(GoTo(25), list);
        }
        break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.Next();
                        PProgram node1 = (PProgram) ((ArrayList)Pop())[0];
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }

    ArrayList New0()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PConstantDeclarations pconstantdeclarationsNode2 = (PConstantDeclarations)nodeArrayList1[0];
        PFunctionDeclarations pfunctiondeclarationsNode3 = (PFunctionDeclarations)nodeArrayList2[0];
        PMainProgram pmainprogramNode4 = (PMainProgram)nodeArrayList3[0];
        AProgram pprogramNode1 = new AProgram (
              pconstantdeclarationsNode2,
              pfunctiondeclarationsNode3,
              pmainprogramNode4
        );
        nodeList.Add(pprogramNode1);
        return nodeList;
    }
    ArrayList New1()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PConstantDeclarations pconstantdeclarationsNode2 = (PConstantDeclarations)nodeArrayList1[0];
        PConstantDeclaration pconstantdeclarationNode3 = (PConstantDeclaration)nodeArrayList2[0];
        AConstsConstantDeclarations pconstantdeclarationsNode1 = new AConstsConstantDeclarations (
              pconstantdeclarationsNode2,
              pconstantdeclarationNode3
        );
        nodeList.Add(pconstantdeclarationsNode1);
        return nodeList;
    }
    ArrayList New2()
    {
        ArrayList nodeList = new ArrayList();
        ANoneConstantDeclarations pconstantdeclarationsNode1 = new ANoneConstantDeclarations (
        );
        nodeList.Add(pconstantdeclarationsNode1);
        return nodeList;
    }
    ArrayList New3()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TConst tconstNode2 = (TConst)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        TId tidNode4 = (TId)nodeArrayList3[0];
        TAssign tassignNode5 = (TAssign)nodeArrayList4[0];
        PExpression pexpressionNode6 = (PExpression)nodeArrayList5[0];
        TEol teolNode7 = (TEol)nodeArrayList6[0];
        AConstantConstantDeclaration pconstantdeclarationNode1 = new AConstantConstantDeclaration (
              tconstNode2,
              tidNode3,
              tidNode4,
              tassignNode5,
              pexpressionNode6,
              teolNode7
        );
        nodeList.Add(pconstantdeclarationNode1);
        return nodeList;
    }
    ArrayList New4()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PFunctionDeclarations pfunctiondeclarationsNode2 = (PFunctionDeclarations)nodeArrayList1[0];
        PFunctionDeclaration pfunctiondeclarationNode3 = (PFunctionDeclaration)nodeArrayList2[0];
        AFuncsFunctionDeclarations pfunctiondeclarationsNode1 = new AFuncsFunctionDeclarations (
              pfunctiondeclarationsNode2,
              pfunctiondeclarationNode3
        );
        nodeList.Add(pfunctiondeclarationsNode1);
        return nodeList;
    }
    ArrayList New5()
    {
        ArrayList nodeList = new ArrayList();
        ANoneFunctionDeclarations pfunctiondeclarationsNode1 = new ANoneFunctionDeclarations (
        );
        nodeList.Add(pfunctiondeclarationsNode1);
        return nodeList;
    }
    ArrayList New6()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList8 = (ArrayList) Pop();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TFunc tfuncNode2 = (TFunc)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        TOpenpar topenparNode4 = (TOpenpar)nodeArrayList3[0];
        PFormalParameters pformalparametersNode5 = (PFormalParameters)nodeArrayList4[0];
        TClosepar tcloseparNode6 = (TClosepar)nodeArrayList5[0];
        TOpenbrace topenbraceNode7 = (TOpenbrace)nodeArrayList6[0];
        PLinesOfCode plinesofcodeNode8 = (PLinesOfCode)nodeArrayList7[0];
        TClosebrace tclosebraceNode9 = (TClosebrace)nodeArrayList8[0];
        AFunctionFunctionDeclaration pfunctiondeclarationNode1 = new AFunctionFunctionDeclaration (
              tfuncNode2,
              tidNode3,
              topenparNode4,
              pformalparametersNode5,
              tcloseparNode6,
              topenbraceNode7,
              plinesofcodeNode8,
              tclosebraceNode9
        );
        nodeList.Add(pfunctiondeclarationNode1);
        return nodeList;
    }
    ArrayList New7()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PFormalParameter pformalparameterNode2 = (PFormalParameter)nodeArrayList1[0];
        TComma tcommaNode3 = (TComma)nodeArrayList2[0];
        PFormalParameters pformalparametersNode4 = (PFormalParameters)nodeArrayList3[0];
        AMultipleFormalParameters pformalparametersNode1 = new AMultipleFormalParameters (
              pformalparameterNode2,
              tcommaNode3,
              pformalparametersNode4
        );
        nodeList.Add(pformalparametersNode1);
        return nodeList;
    }
    ArrayList New8()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PFormalParameter pformalparameterNode2 = (PFormalParameter)nodeArrayList1[0];
        ALastFormalParameters pformalparametersNode1 = new ALastFormalParameters (
              pformalparameterNode2
        );
        nodeList.Add(pformalparametersNode1);
        return nodeList;
    }
    ArrayList New9()
    {
        ArrayList nodeList = new ArrayList();
        ANoneFormalParameters pformalparametersNode1 = new ANoneFormalParameters (
        );
        nodeList.Add(pformalparametersNode1);
        return nodeList;
    }
    ArrayList New10()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        AFormalParameter pformalparameterNode1 = new AFormalParameter (
              tidNode2,
              tidNode3
        );
        nodeList.Add(pformalparameterNode1);
        return nodeList;
    }
    ArrayList New11()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TMain tmainNode2 = (TMain)nodeArrayList1[0];
        TOpenbrace topenbraceNode3 = (TOpenbrace)nodeArrayList2[0];
        PLinesOfCode plinesofcodeNode4 = (PLinesOfCode)nodeArrayList3[0];
        TClosebrace tclosebraceNode5 = (TClosebrace)nodeArrayList4[0];
        AMainProgram pmainprogramNode1 = new AMainProgram (
              tmainNode2,
              topenbraceNode3,
              plinesofcodeNode4,
              tclosebraceNode5
        );
        nodeList.Add(pmainprogramNode1);
        return nodeList;
    }
    ArrayList New12()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PLinesOfCode plinesofcodeNode2 = (PLinesOfCode)nodeArrayList1[0];
        PLineOfCode plineofcodeNode3 = (PLineOfCode)nodeArrayList2[0];
        ALinesLinesOfCode plinesofcodeNode1 = new ALinesLinesOfCode (
              plinesofcodeNode2,
              plineofcodeNode3
        );
        nodeList.Add(plinesofcodeNode1);
        return nodeList;
    }
    ArrayList New13()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PLineOfCode plineofcodeNode2 = (PLineOfCode)nodeArrayList1[0];
        ALineLinesOfCode plinesofcodeNode1 = new ALineLinesOfCode (
              plineofcodeNode2
        );
        nodeList.Add(plinesofcodeNode1);
        return nodeList;
    }
    ArrayList New14()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PDeclarationLine pdeclarationlineNode2 = (PDeclarationLine)nodeArrayList1[0];
        ADeclLineOfCode plineofcodeNode1 = new ADeclLineOfCode (
              pdeclarationlineNode2
        );
        nodeList.Add(plineofcodeNode1);
        return nodeList;
    }
    ArrayList New15()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PAssignmentLine passignmentlineNode2 = (PAssignmentLine)nodeArrayList1[0];
        AAssignLineOfCode plineofcodeNode1 = new AAssignLineOfCode (
              passignmentlineNode2
        );
        nodeList.Add(plineofcodeNode1);
        return nodeList;
    }
    ArrayList New16()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PFunctionCallLine pfunctioncalllineNode2 = (PFunctionCallLine)nodeArrayList1[0];
        AFunctionCallLineOfCode plineofcodeNode1 = new AFunctionCallLineOfCode (
              pfunctioncalllineNode2
        );
        nodeList.Add(plineofcodeNode1);
        return nodeList;
    }
    ArrayList New17()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PIfLine piflineNode2 = (PIfLine)nodeArrayList1[0];
        AIfelseLineOfCode plineofcodeNode1 = new AIfelseLineOfCode (
              piflineNode2
        );
        nodeList.Add(plineofcodeNode1);
        return nodeList;
    }
    ArrayList New18()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PWhileLine pwhilelineNode2 = (PWhileLine)nodeArrayList1[0];
        AWhileLineOfCode plineofcodeNode1 = new AWhileLineOfCode (
              pwhilelineNode2
        );
        nodeList.Add(plineofcodeNode1);
        return nodeList;
    }
    ArrayList New19()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        TEol teolNode4 = (TEol)nodeArrayList3[0];
        ADeclarationLine pdeclarationlineNode1 = new ADeclarationLine (
              tidNode2,
              tidNode3,
              teolNode4
        );
        nodeList.Add(pdeclarationlineNode1);
        return nodeList;
    }
    ArrayList New20()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TAssign tassignNode3 = (TAssign)nodeArrayList2[0];
        PAdditionExpr padditionexprNode4 = (PAdditionExpr)nodeArrayList3[0];
        TEol teolNode5 = (TEol)nodeArrayList4[0];
        AAssignmentLine passignmentlineNode1 = new AAssignmentLine (
              tidNode2,
              tassignNode3,
              padditionexprNode4,
              teolNode5
        );
        nodeList.Add(passignmentlineNode1);
        return nodeList;
    }
    ArrayList New21()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TOpenpar topenparNode3 = (TOpenpar)nodeArrayList2[0];
        PActualParameters pactualparametersNode4 = (PActualParameters)nodeArrayList3[0];
        TClosepar tcloseparNode5 = (TClosepar)nodeArrayList4[0];
        TEol teolNode6 = (TEol)nodeArrayList5[0];
        AFunctionCallLine pfunctioncalllineNode1 = new AFunctionCallLine (
              tidNode2,
              topenparNode3,
              pactualparametersNode4,
              tcloseparNode5,
              teolNode6
        );
        nodeList.Add(pfunctioncalllineNode1);
        return nodeList;
    }
    ArrayList New22()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PActualParameter pactualparameterNode2 = (PActualParameter)nodeArrayList1[0];
        TComma tcommaNode3 = (TComma)nodeArrayList2[0];
        PActualParameters pactualparametersNode4 = (PActualParameters)nodeArrayList3[0];
        AMultipleActualParameters pactualparametersNode1 = new AMultipleActualParameters (
              pactualparameterNode2,
              tcommaNode3,
              pactualparametersNode4
        );
        nodeList.Add(pactualparametersNode1);
        return nodeList;
    }
    ArrayList New23()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PActualParameter pactualparameterNode2 = (PActualParameter)nodeArrayList1[0];
        ALastActualParameters pactualparametersNode1 = new ALastActualParameters (
              pactualparameterNode2
        );
        nodeList.Add(pactualparametersNode1);
        return nodeList;
    }
    ArrayList New24()
    {
        ArrayList nodeList = new ArrayList();
        ANoneActualParameters pactualparametersNode1 = new ANoneActualParameters (
        );
        nodeList.Add(pactualparametersNode1);
        return nodeList;
    }
    ArrayList New25()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PAdditionExpr padditionexprNode2 = (PAdditionExpr)nodeArrayList1[0];
        AExprActualParameter pactualparameterNode1 = new AExprActualParameter (
              padditionexprNode2
        );
        nodeList.Add(pactualparameterNode1);
        return nodeList;
    }
    ArrayList New26()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TString tstringNode2 = (TString)nodeArrayList1[0];
        AStringActualParameter pactualparameterNode1 = new AStringActualParameter (
              tstringNode2
        );
        nodeList.Add(pactualparameterNode1);
        return nodeList;
    }
    ArrayList New27()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TWhile twhileNode2 = (TWhile)nodeArrayList1[0];
        TOpenpar topenparNode3 = (TOpenpar)nodeArrayList2[0];
        PCondition pconditionNode4 = (PCondition)nodeArrayList3[0];
        TClosepar tcloseparNode5 = (TClosepar)nodeArrayList4[0];
        TOpenbrace topenbraceNode6 = (TOpenbrace)nodeArrayList5[0];
        PLinesOfCode plinesofcodeNode7 = (PLinesOfCode)nodeArrayList6[0];
        TClosebrace tclosebraceNode8 = (TClosebrace)nodeArrayList7[0];
        AWhileLine pwhilelineNode1 = new AWhileLine (
              twhileNode2,
              topenparNode3,
              pconditionNode4,
              tcloseparNode5,
              topenbraceNode6,
              plinesofcodeNode7,
              tclosebraceNode8
        );
        nodeList.Add(pwhilelineNode1);
        return nodeList;
    }
    ArrayList New28()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TIf tifNode2 = (TIf)nodeArrayList1[0];
        TOpenpar topenparNode3 = (TOpenpar)nodeArrayList2[0];
        PCondition pconditionNode4 = (PCondition)nodeArrayList3[0];
        TClosepar tcloseparNode5 = (TClosepar)nodeArrayList4[0];
        TOpenbrace topenbraceNode6 = (TOpenbrace)nodeArrayList5[0];
        PLinesOfCode plinesofcodeNode7 = (PLinesOfCode)nodeArrayList6[0];
        TClosebrace tclosebraceNode8 = (TClosebrace)nodeArrayList7[0];
        ANoelseIfLine piflineNode1 = new ANoelseIfLine (
              tifNode2,
              topenparNode3,
              pconditionNode4,
              tcloseparNode5,
              topenbraceNode6,
              plinesofcodeNode7,
              tclosebraceNode8
        );
        nodeList.Add(piflineNode1);
        return nodeList;
    }
    ArrayList New29()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList8 = (ArrayList) Pop();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TIf tifNode2 = (TIf)nodeArrayList1[0];
        TOpenpar topenparNode3 = (TOpenpar)nodeArrayList2[0];
        PCondition pconditionNode4 = (PCondition)nodeArrayList3[0];
        TClosepar tcloseparNode5 = (TClosepar)nodeArrayList4[0];
        TOpenbrace topenbraceNode6 = (TOpenbrace)nodeArrayList5[0];
        PLinesOfCode plinesofcodeNode7 = (PLinesOfCode)nodeArrayList6[0];
        TClosebrace tclosebraceNode8 = (TClosebrace)nodeArrayList7[0];
        PElseLine pelselineNode9 = (PElseLine)nodeArrayList8[0];
        AElseIfLine piflineNode1 = new AElseIfLine (
              tifNode2,
              topenparNode3,
              pconditionNode4,
              tcloseparNode5,
              topenbraceNode6,
              plinesofcodeNode7,
              tclosebraceNode8,
              pelselineNode9
        );
        nodeList.Add(piflineNode1);
        return nodeList;
    }
    ArrayList New30()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TElse telseNode2 = (TElse)nodeArrayList1[0];
        TOpenbrace topenbraceNode3 = (TOpenbrace)nodeArrayList2[0];
        PLinesOfCode plinesofcodeNode4 = (PLinesOfCode)nodeArrayList3[0];
        TClosebrace tclosebraceNode5 = (TClosebrace)nodeArrayList4[0];
        AElseLine pelselineNode1 = new AElseLine (
              telseNode2,
              topenbraceNode3,
              plinesofcodeNode4,
              tclosebraceNode5
        );
        nodeList.Add(pelselineNode1);
        return nodeList;
    }
    ArrayList New31()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PFirst pfirstNode2 = (PFirst)nodeArrayList1[0];
        POperator poperatorNode3 = (POperator)nodeArrayList2[0];
        PAdditionExpr padditionexprNode4 = (PAdditionExpr)nodeArrayList3[0];
        PMoreConditions pmoreconditionsNode5 = (PMoreConditions)nodeArrayList4[0];
        PCondition pconditionNode6 = (PCondition)nodeArrayList5[0];
        ACondCondition pconditionNode1 = new ACondCondition (
              pfirstNode2,
              poperatorNode3,
              padditionexprNode4,
              pmoreconditionsNode5,
              pconditionNode6
        );
        nodeList.Add(pconditionNode1);
        return nodeList;
    }
    ArrayList New32()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PAdditionExpr padditionexprNode2 = (PAdditionExpr)nodeArrayList1[0];
        APassCondition pconditionNode1 = new APassCondition (
              padditionexprNode2
        );
        nodeList.Add(pconditionNode1);
        return nodeList;
    }
    ArrayList New33()
    {
        ArrayList nodeList = new ArrayList();
        ANoneCondition pconditionNode1 = new ANoneCondition (
        );
        nodeList.Add(pconditionNode1);
        return nodeList;
    }
    ArrayList New34()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PAdditionExpr padditionexprNode2 = (PAdditionExpr)nodeArrayList1[0];
        AFirst pfirstNode1 = new AFirst (
              padditionexprNode2
        );
        nodeList.Add(pfirstNode1);
        return nodeList;
    }
    ArrayList New35()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TAnd tandNode2 = (TAnd)nodeArrayList1[0];
        AAndMoreConditions pmoreconditionsNode1 = new AAndMoreConditions (
              tandNode2
        );
        nodeList.Add(pmoreconditionsNode1);
        return nodeList;
    }
    ArrayList New36()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TOr torNode2 = (TOr)nodeArrayList1[0];
        AOrMoreConditions pmoreconditionsNode1 = new AOrMoreConditions (
              torNode2
        );
        nodeList.Add(pmoreconditionsNode1);
        return nodeList;
    }
    ArrayList New37()
    {
        ArrayList nodeList = new ArrayList();
        ANoneMoreConditions pmoreconditionsNode1 = new ANoneMoreConditions (
        );
        nodeList.Add(pmoreconditionsNode1);
        return nodeList;
    }
    ArrayList New38()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TEqual tequalNode2 = (TEqual)nodeArrayList1[0];
        AEqOperator poperatorNode1 = new AEqOperator (
              tequalNode2
        );
        nodeList.Add(poperatorNode1);
        return nodeList;
    }
    ArrayList New39()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TNot tnotNode2 = (TNot)nodeArrayList1[0];
        TAssign tassignNode3 = (TAssign)nodeArrayList2[0];
        ANoteqOperator poperatorNode1 = new ANoteqOperator (
              tnotNode2,
              tassignNode3
        );
        nodeList.Add(poperatorNode1);
        return nodeList;
    }
    ArrayList New40()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TGreater tgreaterNode2 = (TGreater)nodeArrayList1[0];
        AGreaterOperator poperatorNode1 = new AGreaterOperator (
              tgreaterNode2
        );
        nodeList.Add(poperatorNode1);
        return nodeList;
    }
    ArrayList New41()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TLess tlessNode2 = (TLess)nodeArrayList1[0];
        ALessOperator poperatorNode1 = new ALessOperator (
              tlessNode2
        );
        nodeList.Add(poperatorNode1);
        return nodeList;
    }
    ArrayList New42()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TGreateq tgreateqNode2 = (TGreateq)nodeArrayList1[0];
        AGreateqOperator poperatorNode1 = new AGreateqOperator (
              tgreateqNode2
        );
        nodeList.Add(poperatorNode1);
        return nodeList;
    }
    ArrayList New43()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TLesseq tlesseqNode2 = (TLesseq)nodeArrayList1[0];
        ALesseqOperator poperatorNode1 = new ALesseqOperator (
              tlesseqNode2
        );
        nodeList.Add(poperatorNode1);
        return nodeList;
    }
    ArrayList New44()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PAdditionExpr padditionexprNode2 = (PAdditionExpr)nodeArrayList1[0];
        TPlus tplusNode3 = (TPlus)nodeArrayList2[0];
        PMultiExpr pmultiexprNode4 = (PMultiExpr)nodeArrayList3[0];
        AAddAdditionExpr padditionexprNode1 = new AAddAdditionExpr (
              padditionexprNode2,
              tplusNode3,
              pmultiexprNode4
        );
        nodeList.Add(padditionexprNode1);
        return nodeList;
    }
    ArrayList New45()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PMultiExpr pmultiexprNode2 = (PMultiExpr)nodeArrayList1[0];
        APassAdditionExpr padditionexprNode1 = new APassAdditionExpr (
              pmultiexprNode2
        );
        nodeList.Add(padditionexprNode1);
        return nodeList;
    }
    ArrayList New46()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PMultiExpr pmultiexprNode2 = (PMultiExpr)nodeArrayList1[0];
        TMult tmultNode3 = (TMult)nodeArrayList2[0];
        POperand poperandNode4 = (POperand)nodeArrayList3[0];
        AMultiMultiExpr pmultiexprNode1 = new AMultiMultiExpr (
              pmultiexprNode2,
              tmultNode3,
              poperandNode4
        );
        nodeList.Add(pmultiexprNode1);
        return nodeList;
    }
    ArrayList New47()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        POperand poperandNode2 = (POperand)nodeArrayList1[0];
        APassMultiExpr pmultiexprNode1 = new APassMultiExpr (
              poperandNode2
        );
        nodeList.Add(pmultiexprNode1);
        return nodeList;
    }
    ArrayList New48()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TInteger tintegerNode2 = (TInteger)nodeArrayList1[0];
        AIntOperand poperandNode1 = new AIntOperand (
              tintegerNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }
    ArrayList New49()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TFloating tfloatingNode2 = (TFloating)nodeArrayList1[0];
        AFloatOperand poperandNode1 = new AFloatOperand (
              tfloatingNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }
    ArrayList New50()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        AIdOperand poperandNode1 = new AIdOperand (
              tidNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }
    ArrayList New51()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TInteger tintegerNode2 = (TInteger)nodeArrayList1[0];
        AIntExpression pexpressionNode1 = new AIntExpression (
              tintegerNode2
        );
        nodeList.Add(pexpressionNode1);
        return nodeList;
    }
    ArrayList New52()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TFloating tfloatingNode2 = (TFloating)nodeArrayList1[0];
        AFloatExpression pexpressionNode1 = new AFloatExpression (
              tfloatingNode2
        );
        nodeList.Add(pexpressionNode1);
        return nodeList;
    }
    ArrayList New53()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TString tstringNode2 = (TString)nodeArrayList1[0];
        AStringExpression pexpressionNode1 = new AStringExpression (
              tstringNode2
        );
        nodeList.Add(pexpressionNode1);
        return nodeList;
    }

    private static int[][][] actionTable = {
      new int[][] {
        new int[] {-1, 1, 2},
      },
      new int[][] {
        new int[] {-1, 3, 1},
        new int[] {29, 2, -1},
      },
      new int[][] {
        new int[] {-1, 1, 5},
        new int[] {23, 0, 3},
      },
      new int[][] {
        new int[] {-1, 3, 3},
        new int[] {25, 0, 6},
      },
      new int[][] {
        new int[] {-1, 1, 1},
      },
      new int[][] {
        new int[] {-1, 3, 5},
        new int[] {19, 0, 7},
        new int[] {24, 0, 8},
      },
      new int[][] {
        new int[] {-1, 3, 6},
        new int[] {25, 0, 11},
      },
      new int[][] {
        new int[] {-1, 3, 7},
        new int[] {25, 0, 12},
      },
      new int[][] {
        new int[] {-1, 3, 8},
        new int[] {16, 0, 13},
      },
      new int[][] {
        new int[] {-1, 1, 4},
      },
      new int[][] {
        new int[] {-1, 1, 0},
      },
      new int[][] {
        new int[] {-1, 3, 11},
        new int[] {0, 0, 14},
      },
      new int[][] {
        new int[] {-1, 3, 12},
        new int[] {14, 0, 15},
      },
      new int[][] {
        new int[] {-1, 3, 13},
        new int[] {20, 0, 16},
        new int[] {21, 0, 17},
        new int[] {25, 0, 18},
      },
      new int[][] {
        new int[] {-1, 3, 14},
        new int[] {26, 0, 26},
        new int[] {27, 0, 27},
        new int[] {28, 0, 28},
      },
      new int[][] {
        new int[] {-1, 1, 9},
        new int[] {25, 0, 30},
      },
      new int[][] {
        new int[] {-1, 3, 16},
        new int[] {14, 0, 33},
      },
      new int[][] {
        new int[] {-1, 3, 17},
        new int[] {14, 0, 34},
      },
      new int[][] {
        new int[] {-1, 3, 18},
        new int[] {0, 0, 35},
        new int[] {14, 0, 36},
        new int[] {25, 0, 37},
      },
      new int[][] {
        new int[] {-1, 3, 19},
        new int[] {17, 0, 38},
        new int[] {20, 0, 16},
        new int[] {21, 0, 17},
        new int[] {25, 0, 18},
      },
      new int[][] {
        new int[] {-1, 1, 13},
      },
      new int[][] {
        new int[] {-1, 1, 14},
      },
      new int[][] {
        new int[] {-1, 1, 15},
      },
      new int[][] {
        new int[] {-1, 1, 16},
      },
      new int[][] {
        new int[] {-1, 1, 18},
      },
      new int[][] {
        new int[] {-1, 1, 17},
      },
      new int[][] {
        new int[] {-1, 1, 51},
      },
      new int[][] {
        new int[] {-1, 1, 52},
      },
      new int[][] {
        new int[] {-1, 1, 53},
      },
      new int[][] {
        new int[] {-1, 3, 29},
        new int[] {13, 0, 40},
      },
      new int[][] {
        new int[] {-1, 3, 30},
        new int[] {25, 0, 41},
      },
      new int[][] {
        new int[] {-1, 3, 31},
        new int[] {15, 0, 42},
      },
      new int[][] {
        new int[] {-1, 1, 8},
        new int[] {18, 0, 43},
      },
      new int[][] {
        new int[] {-1, 1, 33},
        new int[] {25, 0, 44},
        new int[] {26, 0, 45},
        new int[] {27, 0, 46},
      },
      new int[][] {
        new int[] {-1, 1, 33},
        new int[] {25, 0, 44},
        new int[] {26, 0, 45},
        new int[] {27, 0, 46},
      },
      new int[][] {
        new int[] {-1, 3, 35},
        new int[] {25, 0, 44},
        new int[] {26, 0, 45},
        new int[] {27, 0, 46},
      },
      new int[][] {
        new int[] {-1, 1, 24},
        new int[] {25, 0, 44},
        new int[] {26, 0, 45},
        new int[] {27, 0, 46},
        new int[] {28, 0, 54},
      },
      new int[][] {
        new int[] {-1, 3, 37},
        new int[] {13, 0, 58},
      },
      new int[][] {
        new int[] {-1, 1, 11},
      },
      new int[][] {
        new int[] {-1, 1, 12},
      },
      new int[][] {
        new int[] {-1, 1, 3},
      },
      new int[][] {
        new int[] {-1, 1, 10},
      },
      new int[][] {
        new int[] {-1, 3, 42},
        new int[] {16, 0, 59},
      },
      new int[][] {
        new int[] {-1, 1, 9},
        new int[] {25, 0, 30},
      },
      new int[][] {
        new int[] {-1, 1, 50},
      },
      new int[][] {
        new int[] {-1, 1, 48},
      },
      new int[][] {
        new int[] {-1, 1, 49},
      },
      new int[][] {
        new int[] {-1, 3, 47},
        new int[] {15, 0, 61},
      },
      new int[][] {
        new int[] {-1, 3, 48},
        new int[] {7, 0, 62},
        new int[] {8, 0, 63},
        new int[] {9, 0, 64},
        new int[] {10, 0, 65},
        new int[] {11, 0, 66},
        new int[] {12, 0, 67},
      },
      new int[][] {
        new int[] {-1, 1, 34},
        new int[] {1, 0, 69},
        new int[] {15, 1, 32},
      },
      new int[][] {
        new int[] {-1, 1, 45},
        new int[] {3, 0, 70},
      },
      new int[][] {
        new int[] {-1, 1, 47},
      },
      new int[][] {
        new int[] {-1, 3, 52},
        new int[] {15, 0, 71},
      },
      new int[][] {
        new int[] {-1, 3, 53},
        new int[] {1, 0, 69},
        new int[] {13, 0, 72},
      },
      new int[][] {
        new int[] {-1, 1, 26},
      },
      new int[][] {
        new int[] {-1, 3, 55},
        new int[] {15, 0, 73},
      },
      new int[][] {
        new int[] {-1, 1, 23},
        new int[] {18, 0, 74},
      },
      new int[][] {
        new int[] {-1, 1, 25},
        new int[] {1, 0, 69},
      },
      new int[][] {
        new int[] {-1, 1, 19},
      },
      new int[][] {
        new int[] {-1, 3, 59},
        new int[] {20, 0, 16},
        new int[] {21, 0, 17},
        new int[] {25, 0, 18},
      },
      new int[][] {
        new int[] {-1, 1, 7},
      },
      new int[][] {
        new int[] {-1, 3, 61},
        new int[] {16, 0, 76},
      },
      new int[][] {
        new int[] {-1, 3, 62},
        new int[] {0, 0, 77},
      },
      new int[][] {
        new int[] {-1, 1, 38},
      },
      new int[][] {
        new int[] {-1, 1, 42},
      },
      new int[][] {
        new int[] {-1, 1, 43},
      },
      new int[][] {
        new int[] {-1, 1, 40},
      },
      new int[][] {
        new int[] {-1, 1, 41},
      },
      new int[][] {
        new int[] {-1, 3, 68},
        new int[] {25, 0, 44},
        new int[] {26, 0, 45},
        new int[] {27, 0, 46},
      },
      new int[][] {
        new int[] {-1, 3, 69},
        new int[] {25, 0, 44},
        new int[] {26, 0, 45},
        new int[] {27, 0, 46},
      },
      new int[][] {
        new int[] {-1, 3, 70},
        new int[] {25, 0, 44},
        new int[] {26, 0, 45},
        new int[] {27, 0, 46},
      },
      new int[][] {
        new int[] {-1, 3, 71},
        new int[] {16, 0, 81},
      },
      new int[][] {
        new int[] {-1, 1, 20},
      },
      new int[][] {
        new int[] {-1, 3, 73},
        new int[] {13, 0, 82},
      },
      new int[][] {
        new int[] {-1, 1, 24},
        new int[] {25, 0, 44},
        new int[] {26, 0, 45},
        new int[] {27, 0, 46},
        new int[] {28, 0, 54},
      },
      new int[][] {
        new int[] {-1, 3, 75},
        new int[] {17, 0, 84},
        new int[] {20, 0, 16},
        new int[] {21, 0, 17},
        new int[] {25, 0, 18},
      },
      new int[][] {
        new int[] {-1, 3, 76},
        new int[] {20, 0, 16},
        new int[] {21, 0, 17},
        new int[] {25, 0, 18},
      },
      new int[][] {
        new int[] {-1, 1, 39},
      },
      new int[][] {
        new int[] {-1, 1, 37},
        new int[] {1, 0, 69},
        new int[] {5, 0, 86},
        new int[] {6, 0, 87},
      },
      new int[][] {
        new int[] {-1, 1, 44},
        new int[] {3, 0, 70},
      },
      new int[][] {
        new int[] {-1, 1, 46},
      },
      new int[][] {
        new int[] {-1, 3, 81},
        new int[] {20, 0, 16},
        new int[] {21, 0, 17},
        new int[] {25, 0, 18},
      },
      new int[][] {
        new int[] {-1, 1, 21},
      },
      new int[][] {
        new int[] {-1, 1, 22},
      },
      new int[][] {
        new int[] {-1, 1, 6},
      },
      new int[][] {
        new int[] {-1, 3, 85},
        new int[] {17, 0, 90},
        new int[] {20, 0, 16},
        new int[] {21, 0, 17},
        new int[] {25, 0, 18},
      },
      new int[][] {
        new int[] {-1, 1, 35},
      },
      new int[][] {
        new int[] {-1, 1, 36},
      },
      new int[][] {
        new int[] {-1, 1, 33},
        new int[] {25, 0, 44},
        new int[] {26, 0, 45},
        new int[] {27, 0, 46},
      },
      new int[][] {
        new int[] {-1, 3, 89},
        new int[] {17, 0, 92},
        new int[] {20, 0, 16},
        new int[] {21, 0, 17},
        new int[] {25, 0, 18},
      },
      new int[][] {
        new int[] {-1, 1, 27},
      },
      new int[][] {
        new int[] {-1, 1, 31},
      },
      new int[][] {
        new int[] {-1, 1, 28},
        new int[] {22, 0, 93},
      },
      new int[][] {
        new int[] {-1, 3, 93},
        new int[] {16, 0, 95},
      },
      new int[][] {
        new int[] {-1, 1, 29},
      },
      new int[][] {
        new int[] {-1, 3, 95},
        new int[] {20, 0, 16},
        new int[] {21, 0, 17},
        new int[] {25, 0, 18},
      },
      new int[][] {
        new int[] {-1, 3, 96},
        new int[] {17, 0, 97},
        new int[] {20, 0, 16},
        new int[] {21, 0, 17},
        new int[] {25, 0, 18},
      },
      new int[][] {
        new int[] {-1, 1, 30},
      },
    };

    private static int[][][] gotoTable  = {
      new int[][] {
        new int[] {-1, 1},
      },
      new int[][] {
        new int[] {-1, 2},
      },
      new int[][] {
        new int[] {-1, 4},
      },
      new int[][] {
        new int[] {-1, 5},
      },
      new int[][] {
        new int[] {-1, 9},
      },
      new int[][] {
        new int[] {-1, 31},
        new int[] {43, 60},
      },
      new int[][] {
        new int[] {-1, 32},
      },
      new int[][] {
        new int[] {-1, 10},
      },
      new int[][] {
        new int[] {-1, 19},
        new int[] {59, 75},
        new int[] {76, 85},
        new int[] {81, 89},
        new int[] {95, 96},
      },
      new int[][] {
        new int[] {-1, 20},
        new int[] {19, 39},
        new int[] {75, 39},
        new int[] {85, 39},
        new int[] {89, 39},
        new int[] {96, 39},
      },
      new int[][] {
        new int[] {-1, 21},
      },
      new int[][] {
        new int[] {-1, 22},
      },
      new int[][] {
        new int[] {-1, 23},
      },
      new int[][] {
        new int[] {-1, 55},
        new int[] {74, 83},
      },
      new int[][] {
        new int[] {-1, 56},
      },
      new int[][] {
        new int[] {-1, 24},
      },
      new int[][] {
        new int[] {-1, 25},
      },
      new int[][] {
        new int[] {-1, 94},
      },
      new int[][] {
        new int[] {-1, 47},
        new int[] {34, 52},
        new int[] {88, 91},
      },
      new int[][] {
        new int[] {-1, 48},
      },
      new int[][] {
        new int[] {-1, 88},
      },
      new int[][] {
        new int[] {-1, 68},
      },
      new int[][] {
        new int[] {-1, 49},
        new int[] {35, 53},
        new int[] {36, 57},
        new int[] {68, 78},
        new int[] {74, 57},
      },
      new int[][] {
        new int[] {-1, 50},
        new int[] {69, 79},
      },
      new int[][] {
        new int[] {-1, 51},
        new int[] {70, 80},
      },
      new int[][] {
        new int[] {-1, 29},
      },
    };

    private static String[] errorMessages = {
      "expecting: 'func', 'const', 'main'",
      "expecting: EOF",
      "expecting: id",
      "expecting: 'func', 'main'",
      "expecting: '{'",
      "expecting: '='",
      "expecting: '('",
      "expecting: 'while', 'if', id",
      "expecting: integer, floating, string",
      "expecting: ')', id",
      "expecting: '=', '(', id",
      "expecting: '}', 'while', 'if', id",
      "expecting: ';'",
      "expecting: ')'",
      "expecting: ')', ','",
      "expecting: ')', id, integer, floating",
      "expecting: id, integer, floating",
      "expecting: ')', id, integer, floating, string",
      "expecting: '+', '*', '&', '|', '!', '==', '>=', '<=', '>', '<', ';', ')', ',', id, integer, floating",
      "expecting: '!', '==', '>=', '<=', '>', '<'",
      "expecting: '+', '!', '==', '>=', '<=', '>', '<', ')'",
      "expecting: '+', ';'",
      "expecting: '+', ')', ','",
      "expecting: '+', '&', '|', ')', id, integer, floating",
      "expecting: '}', 'while', 'if', 'else', id",
    };

    private static int[] errors = {
      0, 1, 0, 2, 0, 3, 2, 2, 4, 3, 1, 5, 6, 7, 8, 9, 
      6, 6, 10, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 2, 13, 
      14, 15, 15, 16, 17, 12, 1, 11, 0, 14, 4, 9, 18, 18, 18, 13, 
      19, 20, 18, 18, 13, 21, 14, 13, 14, 22, 11, 7, 13, 4, 5, 16, 
      16, 16, 16, 16, 16, 16, 16, 4, 11, 12, 17, 11, 7, 16, 23, 18, 
      18, 7, 11, 13, 3, 11, 15, 15, 15, 11, 11, 13, 24, 4, 11, 7, 
      11, 11, 
    };
}
}
