/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using CS426.node;

namespace CS426.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseAProgram(AProgram node);
    void CaseAConstsConstantDeclarations(AConstsConstantDeclarations node);
    void CaseANoneConstantDeclarations(ANoneConstantDeclarations node);
    void CaseAConstantConstantDeclaration(AConstantConstantDeclaration node);
    void CaseAFuncsFunctionDeclarations(AFuncsFunctionDeclarations node);
    void CaseANoneFunctionDeclarations(ANoneFunctionDeclarations node);
    void CaseAFunctionFunctionDeclaration(AFunctionFunctionDeclaration node);
    void CaseAMultipleFormalParameters(AMultipleFormalParameters node);
    void CaseALastFormalParameters(ALastFormalParameters node);
    void CaseANoneFormalParameters(ANoneFormalParameters node);
    void CaseAFormalParameter(AFormalParameter node);
    void CaseAMainProgram(AMainProgram node);
    void CaseALinesLinesOfCode(ALinesLinesOfCode node);
    void CaseALineLinesOfCode(ALineLinesOfCode node);
    void CaseADeclLineOfCode(ADeclLineOfCode node);
    void CaseAAssignLineOfCode(AAssignLineOfCode node);
    void CaseAFunctionCallLineOfCode(AFunctionCallLineOfCode node);
    void CaseAIfelseLineOfCode(AIfelseLineOfCode node);
    void CaseAWhileLineOfCode(AWhileLineOfCode node);
    void CaseADeclarationLine(ADeclarationLine node);
    void CaseAAssignmentLine(AAssignmentLine node);
    void CaseAFunctionCallLine(AFunctionCallLine node);
    void CaseAMultipleActualParameters(AMultipleActualParameters node);
    void CaseALastActualParameters(ALastActualParameters node);
    void CaseANoneActualParameters(ANoneActualParameters node);
    void CaseAExprActualParameter(AExprActualParameter node);
    void CaseAStringActualParameter(AStringActualParameter node);
    void CaseAWhileLine(AWhileLine node);
    void CaseANoelseIfLine(ANoelseIfLine node);
    void CaseAElseIfLine(AElseIfLine node);
    void CaseAElseLine(AElseLine node);
    void CaseACondCondition(ACondCondition node);
    void CaseAPassCondition(APassCondition node);
    void CaseANoneCondition(ANoneCondition node);
    void CaseAFirst(AFirst node);
    void CaseAAndMoreConditions(AAndMoreConditions node);
    void CaseAOrMoreConditions(AOrMoreConditions node);
    void CaseANoneMoreConditions(ANoneMoreConditions node);
    void CaseAEqOperator(AEqOperator node);
    void CaseANoteqOperator(ANoteqOperator node);
    void CaseAGreaterOperator(AGreaterOperator node);
    void CaseALessOperator(ALessOperator node);
    void CaseAGreateqOperator(AGreateqOperator node);
    void CaseALesseqOperator(ALesseqOperator node);
    void CaseAAddAdditionExpr(AAddAdditionExpr node);
    void CaseAPassAdditionExpr(APassAdditionExpr node);
    void CaseAMultiMultiExpr(AMultiMultiExpr node);
    void CaseAPassMultiExpr(APassMultiExpr node);
    void CaseAIntOperand(AIntOperand node);
    void CaseAFloatOperand(AFloatOperand node);
    void CaseAIdOperand(AIdOperand node);
    void CaseAIntExpression(AIntExpression node);
    void CaseAFloatExpression(AFloatExpression node);
    void CaseAStringExpression(AStringExpression node);

    void CaseTAssign(TAssign node);
    void CaseTPlus(TPlus node);
    void CaseTMinus(TMinus node);
    void CaseTMult(TMult node);
    void CaseTDiv(TDiv node);
    void CaseTAnd(TAnd node);
    void CaseTOr(TOr node);
    void CaseTNot(TNot node);
    void CaseTEqual(TEqual node);
    void CaseTGreateq(TGreateq node);
    void CaseTLesseq(TLesseq node);
    void CaseTGreater(TGreater node);
    void CaseTLess(TLess node);
    void CaseTEol(TEol node);
    void CaseTOpenpar(TOpenpar node);
    void CaseTClosepar(TClosepar node);
    void CaseTOpenbrace(TOpenbrace node);
    void CaseTClosebrace(TClosebrace node);
    void CaseTComma(TComma node);
    void CaseTFunc(TFunc node);
    void CaseTWhile(TWhile node);
    void CaseTIf(TIf node);
    void CaseTElse(TElse node);
    void CaseTConst(TConst node);
    void CaseTMain(TMain node);
    void CaseTId(TId node);
    void CaseTComment(TComment node);
    void CaseTInteger(TInteger node);
    void CaseTFloating(TFloating node);
    void CaseTString(TString node);
    void CaseTBlank(TBlank node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseAProgram(AProgram node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAConstsConstantDeclarations(AConstsConstantDeclarations node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneConstantDeclarations(ANoneConstantDeclarations node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAConstantConstantDeclaration(AConstantConstantDeclaration node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFuncsFunctionDeclarations(AFuncsFunctionDeclarations node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneFunctionDeclarations(ANoneFunctionDeclarations node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctionFunctionDeclaration(AFunctionFunctionDeclaration node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleFormalParameters(AMultipleFormalParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALastFormalParameters(ALastFormalParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneFormalParameters(ANoneFormalParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFormalParameter(AFormalParameter node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMainProgram(AMainProgram node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALinesLinesOfCode(ALinesLinesOfCode node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALineLinesOfCode(ALineLinesOfCode node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclLineOfCode(ADeclLineOfCode node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignLineOfCode(AAssignLineOfCode node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctionCallLineOfCode(AFunctionCallLineOfCode node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfelseLineOfCode(AIfelseLineOfCode node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileLineOfCode(AWhileLineOfCode node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclarationLine(ADeclarationLine node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignmentLine(AAssignmentLine node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctionCallLine(AFunctionCallLine node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleActualParameters(AMultipleActualParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALastActualParameters(ALastActualParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneActualParameters(ANoneActualParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAExprActualParameter(AExprActualParameter node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStringActualParameter(AStringActualParameter node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileLine(AWhileLine node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoelseIfLine(ANoelseIfLine node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAElseIfLine(AElseIfLine node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAElseLine(AElseLine node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACondCondition(ACondCondition node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassCondition(APassCondition node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneCondition(ANoneCondition node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFirst(AFirst node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAndMoreConditions(AAndMoreConditions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOrMoreConditions(AOrMoreConditions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneMoreConditions(ANoneMoreConditions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEqOperator(AEqOperator node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoteqOperator(ANoteqOperator node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreaterOperator(AGreaterOperator node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALessOperator(ALessOperator node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreateqOperator(AGreateqOperator node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALesseqOperator(ALesseqOperator node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAddAdditionExpr(AAddAdditionExpr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassAdditionExpr(APassAdditionExpr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultiMultiExpr(AMultiMultiExpr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassMultiExpr(APassMultiExpr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntOperand(AIntOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatOperand(AFloatOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIdOperand(AIdOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntExpression(AIntExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatExpression(AFloatExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStringExpression(AStringExpression node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTAssign(TAssign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPlus(TPlus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMinus(TMinus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMult(TMult node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDiv(TDiv node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAnd(TAnd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOr(TOr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNot(TNot node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEqual(TEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreateq(TGreateq node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLesseq(TLesseq node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreater(TGreater node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLess(TLess node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEol(TEol node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOpenpar(TOpenpar node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTClosepar(TClosepar node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOpenbrace(TOpenbrace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTClosebrace(TClosebrace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComma(TComma node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFunc(TFunc node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTWhile(TWhile node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIf(TIf node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTElse(TElse node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTConst(TConst node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMain(TMain node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTId(TId node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComment(TComment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTInteger(TInteger node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFloating(TFloating node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTString(TString node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBlank(TBlank node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPProgram().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetConstantDeclarations() != null)
        {
            node.GetConstantDeclarations().Apply(this);
        }
        if(node.GetFunctionDeclarations() != null)
        {
            node.GetFunctionDeclarations().Apply(this);
        }
        if(node.GetMainProgram() != null)
        {
            node.GetMainProgram().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAConstsConstantDeclarations(AConstsConstantDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstsConstantDeclarations(AConstsConstantDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstsConstantDeclarations(AConstsConstantDeclarations node)
    {
        InAConstsConstantDeclarations(node);
        if(node.GetConstantDeclarations() != null)
        {
            node.GetConstantDeclarations().Apply(this);
        }
        if(node.GetConstantDeclaration() != null)
        {
            node.GetConstantDeclaration().Apply(this);
        }
        OutAConstsConstantDeclarations(node);
    }
    public virtual void InANoneConstantDeclarations(ANoneConstantDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneConstantDeclarations(ANoneConstantDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneConstantDeclarations(ANoneConstantDeclarations node)
    {
        InANoneConstantDeclarations(node);
        OutANoneConstantDeclarations(node);
    }
    public virtual void InAConstantConstantDeclaration(AConstantConstantDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantConstantDeclaration(AConstantConstantDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantConstantDeclaration(AConstantConstantDeclaration node)
    {
        InAConstantConstantDeclaration(node);
        if(node.GetConst() != null)
        {
            node.GetConst().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVarName() != null)
        {
            node.GetVarName().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAConstantConstantDeclaration(node);
    }
    public virtual void InAFuncsFunctionDeclarations(AFuncsFunctionDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFuncsFunctionDeclarations(AFuncsFunctionDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseAFuncsFunctionDeclarations(AFuncsFunctionDeclarations node)
    {
        InAFuncsFunctionDeclarations(node);
        if(node.GetFunctionDeclarations() != null)
        {
            node.GetFunctionDeclarations().Apply(this);
        }
        if(node.GetFunctionDeclaration() != null)
        {
            node.GetFunctionDeclaration().Apply(this);
        }
        OutAFuncsFunctionDeclarations(node);
    }
    public virtual void InANoneFunctionDeclarations(ANoneFunctionDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneFunctionDeclarations(ANoneFunctionDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneFunctionDeclarations(ANoneFunctionDeclarations node)
    {
        InANoneFunctionDeclarations(node);
        OutANoneFunctionDeclarations(node);
    }
    public virtual void InAFunctionFunctionDeclaration(AFunctionFunctionDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionFunctionDeclaration(AFunctionFunctionDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionFunctionDeclaration(AFunctionFunctionDeclaration node)
    {
        InAFunctionFunctionDeclaration(node);
        if(node.GetFunc() != null)
        {
            node.GetFunc().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetOpenpar() != null)
        {
            node.GetOpenpar().Apply(this);
        }
        if(node.GetFormalParameters() != null)
        {
            node.GetFormalParameters().Apply(this);
        }
        if(node.GetClosepar() != null)
        {
            node.GetClosepar().Apply(this);
        }
        if(node.GetOpenbrace() != null)
        {
            node.GetOpenbrace().Apply(this);
        }
        if(node.GetLinesOfCode() != null)
        {
            node.GetLinesOfCode().Apply(this);
        }
        if(node.GetClosebrace() != null)
        {
            node.GetClosebrace().Apply(this);
        }
        OutAFunctionFunctionDeclaration(node);
    }
    public virtual void InAMultipleFormalParameters(AMultipleFormalParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleFormalParameters(AMultipleFormalParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleFormalParameters(AMultipleFormalParameters node)
    {
        InAMultipleFormalParameters(node);
        if(node.GetFormalParameter() != null)
        {
            node.GetFormalParameter().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetFormalParameters() != null)
        {
            node.GetFormalParameters().Apply(this);
        }
        OutAMultipleFormalParameters(node);
    }
    public virtual void InALastFormalParameters(ALastFormalParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutALastFormalParameters(ALastFormalParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseALastFormalParameters(ALastFormalParameters node)
    {
        InALastFormalParameters(node);
        if(node.GetFormalParameter() != null)
        {
            node.GetFormalParameter().Apply(this);
        }
        OutALastFormalParameters(node);
    }
    public virtual void InANoneFormalParameters(ANoneFormalParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneFormalParameters(ANoneFormalParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneFormalParameters(ANoneFormalParameters node)
    {
        InANoneFormalParameters(node);
        OutANoneFormalParameters(node);
    }
    public virtual void InAFormalParameter(AFormalParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFormalParameter(AFormalParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseAFormalParameter(AFormalParameter node)
    {
        InAFormalParameter(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVarName() != null)
        {
            node.GetVarName().Apply(this);
        }
        OutAFormalParameter(node);
    }
    public virtual void InAMainProgram(AMainProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainProgram(AMainProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainProgram(AMainProgram node)
    {
        InAMainProgram(node);
        if(node.GetMain() != null)
        {
            node.GetMain().Apply(this);
        }
        if(node.GetOpenbrace() != null)
        {
            node.GetOpenbrace().Apply(this);
        }
        if(node.GetLinesOfCode() != null)
        {
            node.GetLinesOfCode().Apply(this);
        }
        if(node.GetClosebrace() != null)
        {
            node.GetClosebrace().Apply(this);
        }
        OutAMainProgram(node);
    }
    public virtual void InALinesLinesOfCode(ALinesLinesOfCode node)
    {
        DefaultIn(node);
    }

    public virtual void OutALinesLinesOfCode(ALinesLinesOfCode node)
    {
        DefaultOut(node);
    }

    public override void CaseALinesLinesOfCode(ALinesLinesOfCode node)
    {
        InALinesLinesOfCode(node);
        if(node.GetLinesOfCode() != null)
        {
            node.GetLinesOfCode().Apply(this);
        }
        if(node.GetLineOfCode() != null)
        {
            node.GetLineOfCode().Apply(this);
        }
        OutALinesLinesOfCode(node);
    }
    public virtual void InALineLinesOfCode(ALineLinesOfCode node)
    {
        DefaultIn(node);
    }

    public virtual void OutALineLinesOfCode(ALineLinesOfCode node)
    {
        DefaultOut(node);
    }

    public override void CaseALineLinesOfCode(ALineLinesOfCode node)
    {
        InALineLinesOfCode(node);
        if(node.GetLineOfCode() != null)
        {
            node.GetLineOfCode().Apply(this);
        }
        OutALineLinesOfCode(node);
    }
    public virtual void InADeclLineOfCode(ADeclLineOfCode node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclLineOfCode(ADeclLineOfCode node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclLineOfCode(ADeclLineOfCode node)
    {
        InADeclLineOfCode(node);
        if(node.GetDeclarationLine() != null)
        {
            node.GetDeclarationLine().Apply(this);
        }
        OutADeclLineOfCode(node);
    }
    public virtual void InAAssignLineOfCode(AAssignLineOfCode node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignLineOfCode(AAssignLineOfCode node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignLineOfCode(AAssignLineOfCode node)
    {
        InAAssignLineOfCode(node);
        if(node.GetAssignmentLine() != null)
        {
            node.GetAssignmentLine().Apply(this);
        }
        OutAAssignLineOfCode(node);
    }
    public virtual void InAFunctionCallLineOfCode(AFunctionCallLineOfCode node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionCallLineOfCode(AFunctionCallLineOfCode node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionCallLineOfCode(AFunctionCallLineOfCode node)
    {
        InAFunctionCallLineOfCode(node);
        if(node.GetFunctionCallLine() != null)
        {
            node.GetFunctionCallLine().Apply(this);
        }
        OutAFunctionCallLineOfCode(node);
    }
    public virtual void InAIfelseLineOfCode(AIfelseLineOfCode node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfelseLineOfCode(AIfelseLineOfCode node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfelseLineOfCode(AIfelseLineOfCode node)
    {
        InAIfelseLineOfCode(node);
        if(node.GetIfLine() != null)
        {
            node.GetIfLine().Apply(this);
        }
        OutAIfelseLineOfCode(node);
    }
    public virtual void InAWhileLineOfCode(AWhileLineOfCode node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileLineOfCode(AWhileLineOfCode node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileLineOfCode(AWhileLineOfCode node)
    {
        InAWhileLineOfCode(node);
        if(node.GetWhileLine() != null)
        {
            node.GetWhileLine().Apply(this);
        }
        OutAWhileLineOfCode(node);
    }
    public virtual void InADeclarationLine(ADeclarationLine node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarationLine(ADeclarationLine node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarationLine(ADeclarationLine node)
    {
        InADeclarationLine(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVarName() != null)
        {
            node.GetVarName().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutADeclarationLine(node);
    }
    public virtual void InAAssignmentLine(AAssignmentLine node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentLine(AAssignmentLine node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentLine(AAssignmentLine node)
    {
        InAAssignmentLine(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetAdditionExpr() != null)
        {
            node.GetAdditionExpr().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAAssignmentLine(node);
    }
    public virtual void InAFunctionCallLine(AFunctionCallLine node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionCallLine(AFunctionCallLine node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionCallLine(AFunctionCallLine node)
    {
        InAFunctionCallLine(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetOpenpar() != null)
        {
            node.GetOpenpar().Apply(this);
        }
        if(node.GetActualParameters() != null)
        {
            node.GetActualParameters().Apply(this);
        }
        if(node.GetClosepar() != null)
        {
            node.GetClosepar().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAFunctionCallLine(node);
    }
    public virtual void InAMultipleActualParameters(AMultipleActualParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleActualParameters(AMultipleActualParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleActualParameters(AMultipleActualParameters node)
    {
        InAMultipleActualParameters(node);
        if(node.GetActualParameter() != null)
        {
            node.GetActualParameter().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetActualParameters() != null)
        {
            node.GetActualParameters().Apply(this);
        }
        OutAMultipleActualParameters(node);
    }
    public virtual void InALastActualParameters(ALastActualParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutALastActualParameters(ALastActualParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseALastActualParameters(ALastActualParameters node)
    {
        InALastActualParameters(node);
        if(node.GetActualParameter() != null)
        {
            node.GetActualParameter().Apply(this);
        }
        OutALastActualParameters(node);
    }
    public virtual void InANoneActualParameters(ANoneActualParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneActualParameters(ANoneActualParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneActualParameters(ANoneActualParameters node)
    {
        InANoneActualParameters(node);
        OutANoneActualParameters(node);
    }
    public virtual void InAExprActualParameter(AExprActualParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExprActualParameter(AExprActualParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseAExprActualParameter(AExprActualParameter node)
    {
        InAExprActualParameter(node);
        if(node.GetAdditionExpr() != null)
        {
            node.GetAdditionExpr().Apply(this);
        }
        OutAExprActualParameter(node);
    }
    public virtual void InAStringActualParameter(AStringActualParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringActualParameter(AStringActualParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringActualParameter(AStringActualParameter node)
    {
        InAStringActualParameter(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringActualParameter(node);
    }
    public virtual void InAWhileLine(AWhileLine node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileLine(AWhileLine node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileLine(AWhileLine node)
    {
        InAWhileLine(node);
        if(node.GetWhile() != null)
        {
            node.GetWhile().Apply(this);
        }
        if(node.GetOpenpar() != null)
        {
            node.GetOpenpar().Apply(this);
        }
        if(node.GetCondition() != null)
        {
            node.GetCondition().Apply(this);
        }
        if(node.GetClosepar() != null)
        {
            node.GetClosepar().Apply(this);
        }
        if(node.GetOpenbrace() != null)
        {
            node.GetOpenbrace().Apply(this);
        }
        if(node.GetLinesOfCode() != null)
        {
            node.GetLinesOfCode().Apply(this);
        }
        if(node.GetClosebrace() != null)
        {
            node.GetClosebrace().Apply(this);
        }
        OutAWhileLine(node);
    }
    public virtual void InANoelseIfLine(ANoelseIfLine node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoelseIfLine(ANoelseIfLine node)
    {
        DefaultOut(node);
    }

    public override void CaseANoelseIfLine(ANoelseIfLine node)
    {
        InANoelseIfLine(node);
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        if(node.GetOpenpar() != null)
        {
            node.GetOpenpar().Apply(this);
        }
        if(node.GetCondition() != null)
        {
            node.GetCondition().Apply(this);
        }
        if(node.GetClosepar() != null)
        {
            node.GetClosepar().Apply(this);
        }
        if(node.GetOpenbrace() != null)
        {
            node.GetOpenbrace().Apply(this);
        }
        if(node.GetLinesOfCode() != null)
        {
            node.GetLinesOfCode().Apply(this);
        }
        if(node.GetClosebrace() != null)
        {
            node.GetClosebrace().Apply(this);
        }
        OutANoelseIfLine(node);
    }
    public virtual void InAElseIfLine(AElseIfLine node)
    {
        DefaultIn(node);
    }

    public virtual void OutAElseIfLine(AElseIfLine node)
    {
        DefaultOut(node);
    }

    public override void CaseAElseIfLine(AElseIfLine node)
    {
        InAElseIfLine(node);
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        if(node.GetOpenpar() != null)
        {
            node.GetOpenpar().Apply(this);
        }
        if(node.GetCondition() != null)
        {
            node.GetCondition().Apply(this);
        }
        if(node.GetClosepar() != null)
        {
            node.GetClosepar().Apply(this);
        }
        if(node.GetOpenbrace() != null)
        {
            node.GetOpenbrace().Apply(this);
        }
        if(node.GetLinesOfCode() != null)
        {
            node.GetLinesOfCode().Apply(this);
        }
        if(node.GetClosebrace() != null)
        {
            node.GetClosebrace().Apply(this);
        }
        if(node.GetElseLine() != null)
        {
            node.GetElseLine().Apply(this);
        }
        OutAElseIfLine(node);
    }
    public virtual void InAElseLine(AElseLine node)
    {
        DefaultIn(node);
    }

    public virtual void OutAElseLine(AElseLine node)
    {
        DefaultOut(node);
    }

    public override void CaseAElseLine(AElseLine node)
    {
        InAElseLine(node);
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        if(node.GetOpenbrace() != null)
        {
            node.GetOpenbrace().Apply(this);
        }
        if(node.GetLinesOfCode() != null)
        {
            node.GetLinesOfCode().Apply(this);
        }
        if(node.GetClosebrace() != null)
        {
            node.GetClosebrace().Apply(this);
        }
        OutAElseLine(node);
    }
    public virtual void InACondCondition(ACondCondition node)
    {
        DefaultIn(node);
    }

    public virtual void OutACondCondition(ACondCondition node)
    {
        DefaultOut(node);
    }

    public override void CaseACondCondition(ACondCondition node)
    {
        InACondCondition(node);
        if(node.GetFirst() != null)
        {
            node.GetFirst().Apply(this);
        }
        if(node.GetOperator() != null)
        {
            node.GetOperator().Apply(this);
        }
        if(node.GetAdditionExpr() != null)
        {
            node.GetAdditionExpr().Apply(this);
        }
        if(node.GetMoreConditions() != null)
        {
            node.GetMoreConditions().Apply(this);
        }
        if(node.GetCondition() != null)
        {
            node.GetCondition().Apply(this);
        }
        OutACondCondition(node);
    }
    public virtual void InAPassCondition(APassCondition node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassCondition(APassCondition node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassCondition(APassCondition node)
    {
        InAPassCondition(node);
        if(node.GetAdditionExpr() != null)
        {
            node.GetAdditionExpr().Apply(this);
        }
        OutAPassCondition(node);
    }
    public virtual void InANoneCondition(ANoneCondition node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneCondition(ANoneCondition node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneCondition(ANoneCondition node)
    {
        InANoneCondition(node);
        OutANoneCondition(node);
    }
    public virtual void InAFirst(AFirst node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFirst(AFirst node)
    {
        DefaultOut(node);
    }

    public override void CaseAFirst(AFirst node)
    {
        InAFirst(node);
        if(node.GetAdditionExpr() != null)
        {
            node.GetAdditionExpr().Apply(this);
        }
        OutAFirst(node);
    }
    public virtual void InAAndMoreConditions(AAndMoreConditions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndMoreConditions(AAndMoreConditions node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndMoreConditions(AAndMoreConditions node)
    {
        InAAndMoreConditions(node);
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        OutAAndMoreConditions(node);
    }
    public virtual void InAOrMoreConditions(AOrMoreConditions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrMoreConditions(AOrMoreConditions node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrMoreConditions(AOrMoreConditions node)
    {
        InAOrMoreConditions(node);
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        OutAOrMoreConditions(node);
    }
    public virtual void InANoneMoreConditions(ANoneMoreConditions node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneMoreConditions(ANoneMoreConditions node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneMoreConditions(ANoneMoreConditions node)
    {
        InANoneMoreConditions(node);
        OutANoneMoreConditions(node);
    }
    public virtual void InAEqOperator(AEqOperator node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqOperator(AEqOperator node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqOperator(AEqOperator node)
    {
        InAEqOperator(node);
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        OutAEqOperator(node);
    }
    public virtual void InANoteqOperator(ANoteqOperator node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoteqOperator(ANoteqOperator node)
    {
        DefaultOut(node);
    }

    public override void CaseANoteqOperator(ANoteqOperator node)
    {
        InANoteqOperator(node);
        if(node.GetNot() != null)
        {
            node.GetNot().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        OutANoteqOperator(node);
    }
    public virtual void InAGreaterOperator(AGreaterOperator node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterOperator(AGreaterOperator node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterOperator(AGreaterOperator node)
    {
        InAGreaterOperator(node);
        if(node.GetGreater() != null)
        {
            node.GetGreater().Apply(this);
        }
        OutAGreaterOperator(node);
    }
    public virtual void InALessOperator(ALessOperator node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessOperator(ALessOperator node)
    {
        DefaultOut(node);
    }

    public override void CaseALessOperator(ALessOperator node)
    {
        InALessOperator(node);
        if(node.GetLess() != null)
        {
            node.GetLess().Apply(this);
        }
        OutALessOperator(node);
    }
    public virtual void InAGreateqOperator(AGreateqOperator node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreateqOperator(AGreateqOperator node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreateqOperator(AGreateqOperator node)
    {
        InAGreateqOperator(node);
        if(node.GetGreateq() != null)
        {
            node.GetGreateq().Apply(this);
        }
        OutAGreateqOperator(node);
    }
    public virtual void InALesseqOperator(ALesseqOperator node)
    {
        DefaultIn(node);
    }

    public virtual void OutALesseqOperator(ALesseqOperator node)
    {
        DefaultOut(node);
    }

    public override void CaseALesseqOperator(ALesseqOperator node)
    {
        InALesseqOperator(node);
        if(node.GetLesseq() != null)
        {
            node.GetLesseq().Apply(this);
        }
        OutALesseqOperator(node);
    }
    public virtual void InAAddAdditionExpr(AAddAdditionExpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddAdditionExpr(AAddAdditionExpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddAdditionExpr(AAddAdditionExpr node)
    {
        InAAddAdditionExpr(node);
        if(node.GetAdditionExpr() != null)
        {
            node.GetAdditionExpr().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetMultiExpr() != null)
        {
            node.GetMultiExpr().Apply(this);
        }
        OutAAddAdditionExpr(node);
    }
    public virtual void InAPassAdditionExpr(APassAdditionExpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassAdditionExpr(APassAdditionExpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassAdditionExpr(APassAdditionExpr node)
    {
        InAPassAdditionExpr(node);
        if(node.GetMultiExpr() != null)
        {
            node.GetMultiExpr().Apply(this);
        }
        OutAPassAdditionExpr(node);
    }
    public virtual void InAMultiMultiExpr(AMultiMultiExpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiMultiExpr(AMultiMultiExpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiMultiExpr(AMultiMultiExpr node)
    {
        InAMultiMultiExpr(node);
        if(node.GetMultiExpr() != null)
        {
            node.GetMultiExpr().Apply(this);
        }
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAMultiMultiExpr(node);
    }
    public virtual void InAPassMultiExpr(APassMultiExpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassMultiExpr(APassMultiExpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassMultiExpr(APassMultiExpr node)
    {
        InAPassMultiExpr(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAPassMultiExpr(node);
    }
    public virtual void InAIntOperand(AIntOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntOperand(AIntOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntOperand(AIntOperand node)
    {
        InAIntOperand(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntOperand(node);
    }
    public virtual void InAFloatOperand(AFloatOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatOperand(AFloatOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatOperand(AFloatOperand node)
    {
        InAFloatOperand(node);
        if(node.GetFloating() != null)
        {
            node.GetFloating().Apply(this);
        }
        OutAFloatOperand(node);
    }
    public virtual void InAIdOperand(AIdOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIdOperand(AIdOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAIdOperand(AIdOperand node)
    {
        InAIdOperand(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAIdOperand(node);
    }
    public virtual void InAIntExpression(AIntExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntExpression(AIntExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntExpression(AIntExpression node)
    {
        InAIntExpression(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntExpression(node);
    }
    public virtual void InAFloatExpression(AFloatExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatExpression(AFloatExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatExpression(AFloatExpression node)
    {
        InAFloatExpression(node);
        if(node.GetFloating() != null)
        {
            node.GetFloating().Apply(this);
        }
        OutAFloatExpression(node);
    }
    public virtual void InAStringExpression(AStringExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringExpression(AStringExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringExpression(AStringExpression node)
    {
        InAStringExpression(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringExpression(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPProgram().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetMainProgram() != null)
        {
            node.GetMainProgram().Apply(this);
        }
        if(node.GetFunctionDeclarations() != null)
        {
            node.GetFunctionDeclarations().Apply(this);
        }
        if(node.GetConstantDeclarations() != null)
        {
            node.GetConstantDeclarations().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAConstsConstantDeclarations(AConstsConstantDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstsConstantDeclarations(AConstsConstantDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstsConstantDeclarations(AConstsConstantDeclarations node)
    {
        InAConstsConstantDeclarations(node);
        if(node.GetConstantDeclaration() != null)
        {
            node.GetConstantDeclaration().Apply(this);
        }
        if(node.GetConstantDeclarations() != null)
        {
            node.GetConstantDeclarations().Apply(this);
        }
        OutAConstsConstantDeclarations(node);
    }
    public virtual void InANoneConstantDeclarations(ANoneConstantDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneConstantDeclarations(ANoneConstantDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneConstantDeclarations(ANoneConstantDeclarations node)
    {
        InANoneConstantDeclarations(node);
        OutANoneConstantDeclarations(node);
    }
    public virtual void InAConstantConstantDeclaration(AConstantConstantDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantConstantDeclaration(AConstantConstantDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantConstantDeclaration(AConstantConstantDeclaration node)
    {
        InAConstantConstantDeclaration(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetVarName() != null)
        {
            node.GetVarName().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetConst() != null)
        {
            node.GetConst().Apply(this);
        }
        OutAConstantConstantDeclaration(node);
    }
    public virtual void InAFuncsFunctionDeclarations(AFuncsFunctionDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFuncsFunctionDeclarations(AFuncsFunctionDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseAFuncsFunctionDeclarations(AFuncsFunctionDeclarations node)
    {
        InAFuncsFunctionDeclarations(node);
        if(node.GetFunctionDeclaration() != null)
        {
            node.GetFunctionDeclaration().Apply(this);
        }
        if(node.GetFunctionDeclarations() != null)
        {
            node.GetFunctionDeclarations().Apply(this);
        }
        OutAFuncsFunctionDeclarations(node);
    }
    public virtual void InANoneFunctionDeclarations(ANoneFunctionDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneFunctionDeclarations(ANoneFunctionDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneFunctionDeclarations(ANoneFunctionDeclarations node)
    {
        InANoneFunctionDeclarations(node);
        OutANoneFunctionDeclarations(node);
    }
    public virtual void InAFunctionFunctionDeclaration(AFunctionFunctionDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionFunctionDeclaration(AFunctionFunctionDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionFunctionDeclaration(AFunctionFunctionDeclaration node)
    {
        InAFunctionFunctionDeclaration(node);
        if(node.GetClosebrace() != null)
        {
            node.GetClosebrace().Apply(this);
        }
        if(node.GetLinesOfCode() != null)
        {
            node.GetLinesOfCode().Apply(this);
        }
        if(node.GetOpenbrace() != null)
        {
            node.GetOpenbrace().Apply(this);
        }
        if(node.GetClosepar() != null)
        {
            node.GetClosepar().Apply(this);
        }
        if(node.GetFormalParameters() != null)
        {
            node.GetFormalParameters().Apply(this);
        }
        if(node.GetOpenpar() != null)
        {
            node.GetOpenpar().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetFunc() != null)
        {
            node.GetFunc().Apply(this);
        }
        OutAFunctionFunctionDeclaration(node);
    }
    public virtual void InAMultipleFormalParameters(AMultipleFormalParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleFormalParameters(AMultipleFormalParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleFormalParameters(AMultipleFormalParameters node)
    {
        InAMultipleFormalParameters(node);
        if(node.GetFormalParameters() != null)
        {
            node.GetFormalParameters().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetFormalParameter() != null)
        {
            node.GetFormalParameter().Apply(this);
        }
        OutAMultipleFormalParameters(node);
    }
    public virtual void InALastFormalParameters(ALastFormalParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutALastFormalParameters(ALastFormalParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseALastFormalParameters(ALastFormalParameters node)
    {
        InALastFormalParameters(node);
        if(node.GetFormalParameter() != null)
        {
            node.GetFormalParameter().Apply(this);
        }
        OutALastFormalParameters(node);
    }
    public virtual void InANoneFormalParameters(ANoneFormalParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneFormalParameters(ANoneFormalParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneFormalParameters(ANoneFormalParameters node)
    {
        InANoneFormalParameters(node);
        OutANoneFormalParameters(node);
    }
    public virtual void InAFormalParameter(AFormalParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFormalParameter(AFormalParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseAFormalParameter(AFormalParameter node)
    {
        InAFormalParameter(node);
        if(node.GetVarName() != null)
        {
            node.GetVarName().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutAFormalParameter(node);
    }
    public virtual void InAMainProgram(AMainProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainProgram(AMainProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainProgram(AMainProgram node)
    {
        InAMainProgram(node);
        if(node.GetClosebrace() != null)
        {
            node.GetClosebrace().Apply(this);
        }
        if(node.GetLinesOfCode() != null)
        {
            node.GetLinesOfCode().Apply(this);
        }
        if(node.GetOpenbrace() != null)
        {
            node.GetOpenbrace().Apply(this);
        }
        if(node.GetMain() != null)
        {
            node.GetMain().Apply(this);
        }
        OutAMainProgram(node);
    }
    public virtual void InALinesLinesOfCode(ALinesLinesOfCode node)
    {
        DefaultIn(node);
    }

    public virtual void OutALinesLinesOfCode(ALinesLinesOfCode node)
    {
        DefaultOut(node);
    }

    public override void CaseALinesLinesOfCode(ALinesLinesOfCode node)
    {
        InALinesLinesOfCode(node);
        if(node.GetLineOfCode() != null)
        {
            node.GetLineOfCode().Apply(this);
        }
        if(node.GetLinesOfCode() != null)
        {
            node.GetLinesOfCode().Apply(this);
        }
        OutALinesLinesOfCode(node);
    }
    public virtual void InALineLinesOfCode(ALineLinesOfCode node)
    {
        DefaultIn(node);
    }

    public virtual void OutALineLinesOfCode(ALineLinesOfCode node)
    {
        DefaultOut(node);
    }

    public override void CaseALineLinesOfCode(ALineLinesOfCode node)
    {
        InALineLinesOfCode(node);
        if(node.GetLineOfCode() != null)
        {
            node.GetLineOfCode().Apply(this);
        }
        OutALineLinesOfCode(node);
    }
    public virtual void InADeclLineOfCode(ADeclLineOfCode node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclLineOfCode(ADeclLineOfCode node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclLineOfCode(ADeclLineOfCode node)
    {
        InADeclLineOfCode(node);
        if(node.GetDeclarationLine() != null)
        {
            node.GetDeclarationLine().Apply(this);
        }
        OutADeclLineOfCode(node);
    }
    public virtual void InAAssignLineOfCode(AAssignLineOfCode node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignLineOfCode(AAssignLineOfCode node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignLineOfCode(AAssignLineOfCode node)
    {
        InAAssignLineOfCode(node);
        if(node.GetAssignmentLine() != null)
        {
            node.GetAssignmentLine().Apply(this);
        }
        OutAAssignLineOfCode(node);
    }
    public virtual void InAFunctionCallLineOfCode(AFunctionCallLineOfCode node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionCallLineOfCode(AFunctionCallLineOfCode node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionCallLineOfCode(AFunctionCallLineOfCode node)
    {
        InAFunctionCallLineOfCode(node);
        if(node.GetFunctionCallLine() != null)
        {
            node.GetFunctionCallLine().Apply(this);
        }
        OutAFunctionCallLineOfCode(node);
    }
    public virtual void InAIfelseLineOfCode(AIfelseLineOfCode node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfelseLineOfCode(AIfelseLineOfCode node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfelseLineOfCode(AIfelseLineOfCode node)
    {
        InAIfelseLineOfCode(node);
        if(node.GetIfLine() != null)
        {
            node.GetIfLine().Apply(this);
        }
        OutAIfelseLineOfCode(node);
    }
    public virtual void InAWhileLineOfCode(AWhileLineOfCode node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileLineOfCode(AWhileLineOfCode node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileLineOfCode(AWhileLineOfCode node)
    {
        InAWhileLineOfCode(node);
        if(node.GetWhileLine() != null)
        {
            node.GetWhileLine().Apply(this);
        }
        OutAWhileLineOfCode(node);
    }
    public virtual void InADeclarationLine(ADeclarationLine node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarationLine(ADeclarationLine node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarationLine(ADeclarationLine node)
    {
        InADeclarationLine(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetVarName() != null)
        {
            node.GetVarName().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutADeclarationLine(node);
    }
    public virtual void InAAssignmentLine(AAssignmentLine node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentLine(AAssignmentLine node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentLine(AAssignmentLine node)
    {
        InAAssignmentLine(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetAdditionExpr() != null)
        {
            node.GetAdditionExpr().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAAssignmentLine(node);
    }
    public virtual void InAFunctionCallLine(AFunctionCallLine node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionCallLine(AFunctionCallLine node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionCallLine(AFunctionCallLine node)
    {
        InAFunctionCallLine(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetClosepar() != null)
        {
            node.GetClosepar().Apply(this);
        }
        if(node.GetActualParameters() != null)
        {
            node.GetActualParameters().Apply(this);
        }
        if(node.GetOpenpar() != null)
        {
            node.GetOpenpar().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAFunctionCallLine(node);
    }
    public virtual void InAMultipleActualParameters(AMultipleActualParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleActualParameters(AMultipleActualParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleActualParameters(AMultipleActualParameters node)
    {
        InAMultipleActualParameters(node);
        if(node.GetActualParameters() != null)
        {
            node.GetActualParameters().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetActualParameter() != null)
        {
            node.GetActualParameter().Apply(this);
        }
        OutAMultipleActualParameters(node);
    }
    public virtual void InALastActualParameters(ALastActualParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutALastActualParameters(ALastActualParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseALastActualParameters(ALastActualParameters node)
    {
        InALastActualParameters(node);
        if(node.GetActualParameter() != null)
        {
            node.GetActualParameter().Apply(this);
        }
        OutALastActualParameters(node);
    }
    public virtual void InANoneActualParameters(ANoneActualParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneActualParameters(ANoneActualParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneActualParameters(ANoneActualParameters node)
    {
        InANoneActualParameters(node);
        OutANoneActualParameters(node);
    }
    public virtual void InAExprActualParameter(AExprActualParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExprActualParameter(AExprActualParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseAExprActualParameter(AExprActualParameter node)
    {
        InAExprActualParameter(node);
        if(node.GetAdditionExpr() != null)
        {
            node.GetAdditionExpr().Apply(this);
        }
        OutAExprActualParameter(node);
    }
    public virtual void InAStringActualParameter(AStringActualParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringActualParameter(AStringActualParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringActualParameter(AStringActualParameter node)
    {
        InAStringActualParameter(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringActualParameter(node);
    }
    public virtual void InAWhileLine(AWhileLine node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileLine(AWhileLine node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileLine(AWhileLine node)
    {
        InAWhileLine(node);
        if(node.GetClosebrace() != null)
        {
            node.GetClosebrace().Apply(this);
        }
        if(node.GetLinesOfCode() != null)
        {
            node.GetLinesOfCode().Apply(this);
        }
        if(node.GetOpenbrace() != null)
        {
            node.GetOpenbrace().Apply(this);
        }
        if(node.GetClosepar() != null)
        {
            node.GetClosepar().Apply(this);
        }
        if(node.GetCondition() != null)
        {
            node.GetCondition().Apply(this);
        }
        if(node.GetOpenpar() != null)
        {
            node.GetOpenpar().Apply(this);
        }
        if(node.GetWhile() != null)
        {
            node.GetWhile().Apply(this);
        }
        OutAWhileLine(node);
    }
    public virtual void InANoelseIfLine(ANoelseIfLine node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoelseIfLine(ANoelseIfLine node)
    {
        DefaultOut(node);
    }

    public override void CaseANoelseIfLine(ANoelseIfLine node)
    {
        InANoelseIfLine(node);
        if(node.GetClosebrace() != null)
        {
            node.GetClosebrace().Apply(this);
        }
        if(node.GetLinesOfCode() != null)
        {
            node.GetLinesOfCode().Apply(this);
        }
        if(node.GetOpenbrace() != null)
        {
            node.GetOpenbrace().Apply(this);
        }
        if(node.GetClosepar() != null)
        {
            node.GetClosepar().Apply(this);
        }
        if(node.GetCondition() != null)
        {
            node.GetCondition().Apply(this);
        }
        if(node.GetOpenpar() != null)
        {
            node.GetOpenpar().Apply(this);
        }
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        OutANoelseIfLine(node);
    }
    public virtual void InAElseIfLine(AElseIfLine node)
    {
        DefaultIn(node);
    }

    public virtual void OutAElseIfLine(AElseIfLine node)
    {
        DefaultOut(node);
    }

    public override void CaseAElseIfLine(AElseIfLine node)
    {
        InAElseIfLine(node);
        if(node.GetElseLine() != null)
        {
            node.GetElseLine().Apply(this);
        }
        if(node.GetClosebrace() != null)
        {
            node.GetClosebrace().Apply(this);
        }
        if(node.GetLinesOfCode() != null)
        {
            node.GetLinesOfCode().Apply(this);
        }
        if(node.GetOpenbrace() != null)
        {
            node.GetOpenbrace().Apply(this);
        }
        if(node.GetClosepar() != null)
        {
            node.GetClosepar().Apply(this);
        }
        if(node.GetCondition() != null)
        {
            node.GetCondition().Apply(this);
        }
        if(node.GetOpenpar() != null)
        {
            node.GetOpenpar().Apply(this);
        }
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        OutAElseIfLine(node);
    }
    public virtual void InAElseLine(AElseLine node)
    {
        DefaultIn(node);
    }

    public virtual void OutAElseLine(AElseLine node)
    {
        DefaultOut(node);
    }

    public override void CaseAElseLine(AElseLine node)
    {
        InAElseLine(node);
        if(node.GetClosebrace() != null)
        {
            node.GetClosebrace().Apply(this);
        }
        if(node.GetLinesOfCode() != null)
        {
            node.GetLinesOfCode().Apply(this);
        }
        if(node.GetOpenbrace() != null)
        {
            node.GetOpenbrace().Apply(this);
        }
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        OutAElseLine(node);
    }
    public virtual void InACondCondition(ACondCondition node)
    {
        DefaultIn(node);
    }

    public virtual void OutACondCondition(ACondCondition node)
    {
        DefaultOut(node);
    }

    public override void CaseACondCondition(ACondCondition node)
    {
        InACondCondition(node);
        if(node.GetCondition() != null)
        {
            node.GetCondition().Apply(this);
        }
        if(node.GetMoreConditions() != null)
        {
            node.GetMoreConditions().Apply(this);
        }
        if(node.GetAdditionExpr() != null)
        {
            node.GetAdditionExpr().Apply(this);
        }
        if(node.GetOperator() != null)
        {
            node.GetOperator().Apply(this);
        }
        if(node.GetFirst() != null)
        {
            node.GetFirst().Apply(this);
        }
        OutACondCondition(node);
    }
    public virtual void InAPassCondition(APassCondition node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassCondition(APassCondition node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassCondition(APassCondition node)
    {
        InAPassCondition(node);
        if(node.GetAdditionExpr() != null)
        {
            node.GetAdditionExpr().Apply(this);
        }
        OutAPassCondition(node);
    }
    public virtual void InANoneCondition(ANoneCondition node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneCondition(ANoneCondition node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneCondition(ANoneCondition node)
    {
        InANoneCondition(node);
        OutANoneCondition(node);
    }
    public virtual void InAFirst(AFirst node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFirst(AFirst node)
    {
        DefaultOut(node);
    }

    public override void CaseAFirst(AFirst node)
    {
        InAFirst(node);
        if(node.GetAdditionExpr() != null)
        {
            node.GetAdditionExpr().Apply(this);
        }
        OutAFirst(node);
    }
    public virtual void InAAndMoreConditions(AAndMoreConditions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndMoreConditions(AAndMoreConditions node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndMoreConditions(AAndMoreConditions node)
    {
        InAAndMoreConditions(node);
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        OutAAndMoreConditions(node);
    }
    public virtual void InAOrMoreConditions(AOrMoreConditions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrMoreConditions(AOrMoreConditions node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrMoreConditions(AOrMoreConditions node)
    {
        InAOrMoreConditions(node);
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        OutAOrMoreConditions(node);
    }
    public virtual void InANoneMoreConditions(ANoneMoreConditions node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneMoreConditions(ANoneMoreConditions node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneMoreConditions(ANoneMoreConditions node)
    {
        InANoneMoreConditions(node);
        OutANoneMoreConditions(node);
    }
    public virtual void InAEqOperator(AEqOperator node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqOperator(AEqOperator node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqOperator(AEqOperator node)
    {
        InAEqOperator(node);
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        OutAEqOperator(node);
    }
    public virtual void InANoteqOperator(ANoteqOperator node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoteqOperator(ANoteqOperator node)
    {
        DefaultOut(node);
    }

    public override void CaseANoteqOperator(ANoteqOperator node)
    {
        InANoteqOperator(node);
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetNot() != null)
        {
            node.GetNot().Apply(this);
        }
        OutANoteqOperator(node);
    }
    public virtual void InAGreaterOperator(AGreaterOperator node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterOperator(AGreaterOperator node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterOperator(AGreaterOperator node)
    {
        InAGreaterOperator(node);
        if(node.GetGreater() != null)
        {
            node.GetGreater().Apply(this);
        }
        OutAGreaterOperator(node);
    }
    public virtual void InALessOperator(ALessOperator node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessOperator(ALessOperator node)
    {
        DefaultOut(node);
    }

    public override void CaseALessOperator(ALessOperator node)
    {
        InALessOperator(node);
        if(node.GetLess() != null)
        {
            node.GetLess().Apply(this);
        }
        OutALessOperator(node);
    }
    public virtual void InAGreateqOperator(AGreateqOperator node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreateqOperator(AGreateqOperator node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreateqOperator(AGreateqOperator node)
    {
        InAGreateqOperator(node);
        if(node.GetGreateq() != null)
        {
            node.GetGreateq().Apply(this);
        }
        OutAGreateqOperator(node);
    }
    public virtual void InALesseqOperator(ALesseqOperator node)
    {
        DefaultIn(node);
    }

    public virtual void OutALesseqOperator(ALesseqOperator node)
    {
        DefaultOut(node);
    }

    public override void CaseALesseqOperator(ALesseqOperator node)
    {
        InALesseqOperator(node);
        if(node.GetLesseq() != null)
        {
            node.GetLesseq().Apply(this);
        }
        OutALesseqOperator(node);
    }
    public virtual void InAAddAdditionExpr(AAddAdditionExpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddAdditionExpr(AAddAdditionExpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddAdditionExpr(AAddAdditionExpr node)
    {
        InAAddAdditionExpr(node);
        if(node.GetMultiExpr() != null)
        {
            node.GetMultiExpr().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetAdditionExpr() != null)
        {
            node.GetAdditionExpr().Apply(this);
        }
        OutAAddAdditionExpr(node);
    }
    public virtual void InAPassAdditionExpr(APassAdditionExpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassAdditionExpr(APassAdditionExpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassAdditionExpr(APassAdditionExpr node)
    {
        InAPassAdditionExpr(node);
        if(node.GetMultiExpr() != null)
        {
            node.GetMultiExpr().Apply(this);
        }
        OutAPassAdditionExpr(node);
    }
    public virtual void InAMultiMultiExpr(AMultiMultiExpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiMultiExpr(AMultiMultiExpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiMultiExpr(AMultiMultiExpr node)
    {
        InAMultiMultiExpr(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        if(node.GetMultiExpr() != null)
        {
            node.GetMultiExpr().Apply(this);
        }
        OutAMultiMultiExpr(node);
    }
    public virtual void InAPassMultiExpr(APassMultiExpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassMultiExpr(APassMultiExpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassMultiExpr(APassMultiExpr node)
    {
        InAPassMultiExpr(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAPassMultiExpr(node);
    }
    public virtual void InAIntOperand(AIntOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntOperand(AIntOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntOperand(AIntOperand node)
    {
        InAIntOperand(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntOperand(node);
    }
    public virtual void InAFloatOperand(AFloatOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatOperand(AFloatOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatOperand(AFloatOperand node)
    {
        InAFloatOperand(node);
        if(node.GetFloating() != null)
        {
            node.GetFloating().Apply(this);
        }
        OutAFloatOperand(node);
    }
    public virtual void InAIdOperand(AIdOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIdOperand(AIdOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAIdOperand(AIdOperand node)
    {
        InAIdOperand(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAIdOperand(node);
    }
    public virtual void InAIntExpression(AIntExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntExpression(AIntExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntExpression(AIntExpression node)
    {
        InAIntExpression(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntExpression(node);
    }
    public virtual void InAFloatExpression(AFloatExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatExpression(AFloatExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatExpression(AFloatExpression node)
    {
        InAFloatExpression(node);
        if(node.GetFloating() != null)
        {
            node.GetFloating().Apply(this);
        }
        OutAFloatExpression(node);
    }
    public virtual void InAStringExpression(AStringExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringExpression(AStringExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringExpression(AStringExpression node)
    {
        InAStringExpression(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringExpression(node);
    }
}
} // namespace CS426.analysis
