/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  CS426.analysis;

namespace CS426.node {

public abstract class PProgram : Node
{
}

public abstract class PConstantDeclarations : Node
{
}

public abstract class PConstantDeclaration : Node
{
}

public abstract class PFunctionDeclarations : Node
{
}

public abstract class PFunctionDeclaration : Node
{
}

public abstract class PFormalParameters : Node
{
}

public abstract class PFormalParameter : Node
{
}

public abstract class PMainProgram : Node
{
}

public abstract class PLinesOfCode : Node
{
}

public abstract class PLineOfCode : Node
{
}

public abstract class PDeclarationLine : Node
{
}

public abstract class PAssignmentLine : Node
{
}

public abstract class PFunctionCallLine : Node
{
}

public abstract class PActualParameters : Node
{
}

public abstract class PActualParameter : Node
{
}

public abstract class PWhileLine : Node
{
}

public abstract class PIfLine : Node
{
}

public abstract class PElseLine : Node
{
}

public abstract class PCondition : Node
{
}

public abstract class PFirst : Node
{
}

public abstract class PMoreConditions : Node
{
}

public abstract class POperator : Node
{
}

public abstract class PAdditionExpr : Node
{
}

public abstract class PMultiExpr : Node
{
}

public abstract class POperand : Node
{
}

public abstract class PExpression : Node
{
}


public sealed class AProgram : PProgram
{
    private PConstantDeclarations _constant_declarations_;
    private PFunctionDeclarations _function_declarations_;
    private PMainProgram _main_program_;

    public AProgram ()
    {
    }

    public AProgram (
            PConstantDeclarations _constant_declarations_,
            PFunctionDeclarations _function_declarations_,
            PMainProgram _main_program_
    )
    {
        SetConstantDeclarations (_constant_declarations_);
        SetFunctionDeclarations (_function_declarations_);
        SetMainProgram (_main_program_);
    }

    public override Object Clone()
    {
        return new AProgram (
            (PConstantDeclarations)CloneNode (_constant_declarations_),
            (PFunctionDeclarations)CloneNode (_function_declarations_),
            (PMainProgram)CloneNode (_main_program_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProgram(this);
    }

    public PConstantDeclarations GetConstantDeclarations ()
    {
        return _constant_declarations_;
    }

    public void SetConstantDeclarations (PConstantDeclarations node)
    {
        if(_constant_declarations_ != null)
        {
            _constant_declarations_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constant_declarations_ = node;
    }
    public PFunctionDeclarations GetFunctionDeclarations ()
    {
        return _function_declarations_;
    }

    public void SetFunctionDeclarations (PFunctionDeclarations node)
    {
        if(_function_declarations_ != null)
        {
            _function_declarations_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_declarations_ = node;
    }
    public PMainProgram GetMainProgram ()
    {
        return _main_program_;
    }

    public void SetMainProgram (PMainProgram node)
    {
        if(_main_program_ != null)
        {
            _main_program_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _main_program_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constant_declarations_)
            + ToString (_function_declarations_)
            + ToString (_main_program_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constant_declarations_ == child )
        {
            _constant_declarations_ = null;
            return;
        }
        if ( _function_declarations_ == child )
        {
            _function_declarations_ = null;
            return;
        }
        if ( _main_program_ == child )
        {
            _main_program_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constant_declarations_ == oldChild )
        {
            SetConstantDeclarations ((PConstantDeclarations) newChild);
            return;
        }
        if ( _function_declarations_ == oldChild )
        {
            SetFunctionDeclarations ((PFunctionDeclarations) newChild);
            return;
        }
        if ( _main_program_ == oldChild )
        {
            SetMainProgram ((PMainProgram) newChild);
            return;
        }
    }

}
public sealed class AConstsConstantDeclarations : PConstantDeclarations
{
    private PConstantDeclarations _constant_declarations_;
    private PConstantDeclaration _constant_declaration_;

    public AConstsConstantDeclarations ()
    {
    }

    public AConstsConstantDeclarations (
            PConstantDeclarations _constant_declarations_,
            PConstantDeclaration _constant_declaration_
    )
    {
        SetConstantDeclarations (_constant_declarations_);
        SetConstantDeclaration (_constant_declaration_);
    }

    public override Object Clone()
    {
        return new AConstsConstantDeclarations (
            (PConstantDeclarations)CloneNode (_constant_declarations_),
            (PConstantDeclaration)CloneNode (_constant_declaration_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAConstsConstantDeclarations(this);
    }

    public PConstantDeclarations GetConstantDeclarations ()
    {
        return _constant_declarations_;
    }

    public void SetConstantDeclarations (PConstantDeclarations node)
    {
        if(_constant_declarations_ != null)
        {
            _constant_declarations_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constant_declarations_ = node;
    }
    public PConstantDeclaration GetConstantDeclaration ()
    {
        return _constant_declaration_;
    }

    public void SetConstantDeclaration (PConstantDeclaration node)
    {
        if(_constant_declaration_ != null)
        {
            _constant_declaration_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constant_declaration_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constant_declarations_)
            + ToString (_constant_declaration_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constant_declarations_ == child )
        {
            _constant_declarations_ = null;
            return;
        }
        if ( _constant_declaration_ == child )
        {
            _constant_declaration_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constant_declarations_ == oldChild )
        {
            SetConstantDeclarations ((PConstantDeclarations) newChild);
            return;
        }
        if ( _constant_declaration_ == oldChild )
        {
            SetConstantDeclaration ((PConstantDeclaration) newChild);
            return;
        }
    }

}
public sealed class ANoneConstantDeclarations : PConstantDeclarations
{


    public ANoneConstantDeclarations (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneConstantDeclarations (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneConstantDeclarations(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AConstantConstantDeclaration : PConstantDeclaration
{
    private TConst _const_;
    private TId _type_;
    private TId _var_name_;
    private TAssign _assign_;
    private PExpression _expression_;
    private TEol _eol_;

    public AConstantConstantDeclaration ()
    {
    }

    public AConstantConstantDeclaration (
            TConst _const_,
            TId _type_,
            TId _var_name_,
            TAssign _assign_,
            PExpression _expression_,
            TEol _eol_
    )
    {
        SetConst (_const_);
        SetType (_type_);
        SetVarName (_var_name_);
        SetAssign (_assign_);
        SetExpression (_expression_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AConstantConstantDeclaration (
            (TConst)CloneNode (_const_),
            (TId)CloneNode (_type_),
            (TId)CloneNode (_var_name_),
            (TAssign)CloneNode (_assign_),
            (PExpression)CloneNode (_expression_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAConstantConstantDeclaration(this);
    }

    public TConst GetConst ()
    {
        return _const_;
    }

    public void SetConst (TConst node)
    {
        if(_const_ != null)
        {
            _const_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _const_ = node;
    }
    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetVarName ()
    {
        return _var_name_;
    }

    public void SetVarName (TId node)
    {
        if(_var_name_ != null)
        {
            _var_name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_name_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_const_)
            + ToString (_type_)
            + ToString (_var_name_)
            + ToString (_assign_)
            + ToString (_expression_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _const_ == child )
        {
            _const_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _var_name_ == child )
        {
            _var_name_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _const_ == oldChild )
        {
            SetConst ((TConst) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _var_name_ == oldChild )
        {
            SetVarName ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AFuncsFunctionDeclarations : PFunctionDeclarations
{
    private PFunctionDeclarations _function_declarations_;
    private PFunctionDeclaration _function_declaration_;

    public AFuncsFunctionDeclarations ()
    {
    }

    public AFuncsFunctionDeclarations (
            PFunctionDeclarations _function_declarations_,
            PFunctionDeclaration _function_declaration_
    )
    {
        SetFunctionDeclarations (_function_declarations_);
        SetFunctionDeclaration (_function_declaration_);
    }

    public override Object Clone()
    {
        return new AFuncsFunctionDeclarations (
            (PFunctionDeclarations)CloneNode (_function_declarations_),
            (PFunctionDeclaration)CloneNode (_function_declaration_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFuncsFunctionDeclarations(this);
    }

    public PFunctionDeclarations GetFunctionDeclarations ()
    {
        return _function_declarations_;
    }

    public void SetFunctionDeclarations (PFunctionDeclarations node)
    {
        if(_function_declarations_ != null)
        {
            _function_declarations_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_declarations_ = node;
    }
    public PFunctionDeclaration GetFunctionDeclaration ()
    {
        return _function_declaration_;
    }

    public void SetFunctionDeclaration (PFunctionDeclaration node)
    {
        if(_function_declaration_ != null)
        {
            _function_declaration_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_declaration_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_function_declarations_)
            + ToString (_function_declaration_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _function_declarations_ == child )
        {
            _function_declarations_ = null;
            return;
        }
        if ( _function_declaration_ == child )
        {
            _function_declaration_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _function_declarations_ == oldChild )
        {
            SetFunctionDeclarations ((PFunctionDeclarations) newChild);
            return;
        }
        if ( _function_declaration_ == oldChild )
        {
            SetFunctionDeclaration ((PFunctionDeclaration) newChild);
            return;
        }
    }

}
public sealed class ANoneFunctionDeclarations : PFunctionDeclarations
{


    public ANoneFunctionDeclarations (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneFunctionDeclarations (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneFunctionDeclarations(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AFunctionFunctionDeclaration : PFunctionDeclaration
{
    private TFunc _func_;
    private TId _id_;
    private TOpenpar _openpar_;
    private PFormalParameters _formal_parameters_;
    private TClosepar _closepar_;
    private TOpenbrace _openbrace_;
    private PLinesOfCode _lines_of_code_;
    private TClosebrace _closebrace_;

    public AFunctionFunctionDeclaration ()
    {
    }

    public AFunctionFunctionDeclaration (
            TFunc _func_,
            TId _id_,
            TOpenpar _openpar_,
            PFormalParameters _formal_parameters_,
            TClosepar _closepar_,
            TOpenbrace _openbrace_,
            PLinesOfCode _lines_of_code_,
            TClosebrace _closebrace_
    )
    {
        SetFunc (_func_);
        SetId (_id_);
        SetOpenpar (_openpar_);
        SetFormalParameters (_formal_parameters_);
        SetClosepar (_closepar_);
        SetOpenbrace (_openbrace_);
        SetLinesOfCode (_lines_of_code_);
        SetClosebrace (_closebrace_);
    }

    public override Object Clone()
    {
        return new AFunctionFunctionDeclaration (
            (TFunc)CloneNode (_func_),
            (TId)CloneNode (_id_),
            (TOpenpar)CloneNode (_openpar_),
            (PFormalParameters)CloneNode (_formal_parameters_),
            (TClosepar)CloneNode (_closepar_),
            (TOpenbrace)CloneNode (_openbrace_),
            (PLinesOfCode)CloneNode (_lines_of_code_),
            (TClosebrace)CloneNode (_closebrace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunctionFunctionDeclaration(this);
    }

    public TFunc GetFunc ()
    {
        return _func_;
    }

    public void SetFunc (TFunc node)
    {
        if(_func_ != null)
        {
            _func_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _func_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TOpenpar GetOpenpar ()
    {
        return _openpar_;
    }

    public void SetOpenpar (TOpenpar node)
    {
        if(_openpar_ != null)
        {
            _openpar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openpar_ = node;
    }
    public PFormalParameters GetFormalParameters ()
    {
        return _formal_parameters_;
    }

    public void SetFormalParameters (PFormalParameters node)
    {
        if(_formal_parameters_ != null)
        {
            _formal_parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _formal_parameters_ = node;
    }
    public TClosepar GetClosepar ()
    {
        return _closepar_;
    }

    public void SetClosepar (TClosepar node)
    {
        if(_closepar_ != null)
        {
            _closepar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closepar_ = node;
    }
    public TOpenbrace GetOpenbrace ()
    {
        return _openbrace_;
    }

    public void SetOpenbrace (TOpenbrace node)
    {
        if(_openbrace_ != null)
        {
            _openbrace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openbrace_ = node;
    }
    public PLinesOfCode GetLinesOfCode ()
    {
        return _lines_of_code_;
    }

    public void SetLinesOfCode (PLinesOfCode node)
    {
        if(_lines_of_code_ != null)
        {
            _lines_of_code_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lines_of_code_ = node;
    }
    public TClosebrace GetClosebrace ()
    {
        return _closebrace_;
    }

    public void SetClosebrace (TClosebrace node)
    {
        if(_closebrace_ != null)
        {
            _closebrace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closebrace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_func_)
            + ToString (_id_)
            + ToString (_openpar_)
            + ToString (_formal_parameters_)
            + ToString (_closepar_)
            + ToString (_openbrace_)
            + ToString (_lines_of_code_)
            + ToString (_closebrace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _func_ == child )
        {
            _func_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _openpar_ == child )
        {
            _openpar_ = null;
            return;
        }
        if ( _formal_parameters_ == child )
        {
            _formal_parameters_ = null;
            return;
        }
        if ( _closepar_ == child )
        {
            _closepar_ = null;
            return;
        }
        if ( _openbrace_ == child )
        {
            _openbrace_ = null;
            return;
        }
        if ( _lines_of_code_ == child )
        {
            _lines_of_code_ = null;
            return;
        }
        if ( _closebrace_ == child )
        {
            _closebrace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _func_ == oldChild )
        {
            SetFunc ((TFunc) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _openpar_ == oldChild )
        {
            SetOpenpar ((TOpenpar) newChild);
            return;
        }
        if ( _formal_parameters_ == oldChild )
        {
            SetFormalParameters ((PFormalParameters) newChild);
            return;
        }
        if ( _closepar_ == oldChild )
        {
            SetClosepar ((TClosepar) newChild);
            return;
        }
        if ( _openbrace_ == oldChild )
        {
            SetOpenbrace ((TOpenbrace) newChild);
            return;
        }
        if ( _lines_of_code_ == oldChild )
        {
            SetLinesOfCode ((PLinesOfCode) newChild);
            return;
        }
        if ( _closebrace_ == oldChild )
        {
            SetClosebrace ((TClosebrace) newChild);
            return;
        }
    }

}
public sealed class AMultipleFormalParameters : PFormalParameters
{
    private PFormalParameter _formal_parameter_;
    private TComma _comma_;
    private PFormalParameters _formal_parameters_;

    public AMultipleFormalParameters ()
    {
    }

    public AMultipleFormalParameters (
            PFormalParameter _formal_parameter_,
            TComma _comma_,
            PFormalParameters _formal_parameters_
    )
    {
        SetFormalParameter (_formal_parameter_);
        SetComma (_comma_);
        SetFormalParameters (_formal_parameters_);
    }

    public override Object Clone()
    {
        return new AMultipleFormalParameters (
            (PFormalParameter)CloneNode (_formal_parameter_),
            (TComma)CloneNode (_comma_),
            (PFormalParameters)CloneNode (_formal_parameters_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleFormalParameters(this);
    }

    public PFormalParameter GetFormalParameter ()
    {
        return _formal_parameter_;
    }

    public void SetFormalParameter (PFormalParameter node)
    {
        if(_formal_parameter_ != null)
        {
            _formal_parameter_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _formal_parameter_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PFormalParameters GetFormalParameters ()
    {
        return _formal_parameters_;
    }

    public void SetFormalParameters (PFormalParameters node)
    {
        if(_formal_parameters_ != null)
        {
            _formal_parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _formal_parameters_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_formal_parameter_)
            + ToString (_comma_)
            + ToString (_formal_parameters_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _formal_parameter_ == child )
        {
            _formal_parameter_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _formal_parameters_ == child )
        {
            _formal_parameters_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _formal_parameter_ == oldChild )
        {
            SetFormalParameter ((PFormalParameter) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _formal_parameters_ == oldChild )
        {
            SetFormalParameters ((PFormalParameters) newChild);
            return;
        }
    }

}
public sealed class ALastFormalParameters : PFormalParameters
{
    private PFormalParameter _formal_parameter_;

    public ALastFormalParameters ()
    {
    }

    public ALastFormalParameters (
            PFormalParameter _formal_parameter_
    )
    {
        SetFormalParameter (_formal_parameter_);
    }

    public override Object Clone()
    {
        return new ALastFormalParameters (
            (PFormalParameter)CloneNode (_formal_parameter_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALastFormalParameters(this);
    }

    public PFormalParameter GetFormalParameter ()
    {
        return _formal_parameter_;
    }

    public void SetFormalParameter (PFormalParameter node)
    {
        if(_formal_parameter_ != null)
        {
            _formal_parameter_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _formal_parameter_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_formal_parameter_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _formal_parameter_ == child )
        {
            _formal_parameter_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _formal_parameter_ == oldChild )
        {
            SetFormalParameter ((PFormalParameter) newChild);
            return;
        }
    }

}
public sealed class ANoneFormalParameters : PFormalParameters
{


    public ANoneFormalParameters (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneFormalParameters (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneFormalParameters(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AFormalParameter : PFormalParameter
{
    private TId _type_;
    private TId _var_name_;

    public AFormalParameter ()
    {
    }

    public AFormalParameter (
            TId _type_,
            TId _var_name_
    )
    {
        SetType (_type_);
        SetVarName (_var_name_);
    }

    public override Object Clone()
    {
        return new AFormalParameter (
            (TId)CloneNode (_type_),
            (TId)CloneNode (_var_name_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFormalParameter(this);
    }

    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetVarName ()
    {
        return _var_name_;
    }

    public void SetVarName (TId node)
    {
        if(_var_name_ != null)
        {
            _var_name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_name_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_var_name_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _var_name_ == child )
        {
            _var_name_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _var_name_ == oldChild )
        {
            SetVarName ((TId) newChild);
            return;
        }
    }

}
public sealed class AMainProgram : PMainProgram
{
    private TMain _main_;
    private TOpenbrace _openbrace_;
    private PLinesOfCode _lines_of_code_;
    private TClosebrace _closebrace_;

    public AMainProgram ()
    {
    }

    public AMainProgram (
            TMain _main_,
            TOpenbrace _openbrace_,
            PLinesOfCode _lines_of_code_,
            TClosebrace _closebrace_
    )
    {
        SetMain (_main_);
        SetOpenbrace (_openbrace_);
        SetLinesOfCode (_lines_of_code_);
        SetClosebrace (_closebrace_);
    }

    public override Object Clone()
    {
        return new AMainProgram (
            (TMain)CloneNode (_main_),
            (TOpenbrace)CloneNode (_openbrace_),
            (PLinesOfCode)CloneNode (_lines_of_code_),
            (TClosebrace)CloneNode (_closebrace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMainProgram(this);
    }

    public TMain GetMain ()
    {
        return _main_;
    }

    public void SetMain (TMain node)
    {
        if(_main_ != null)
        {
            _main_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _main_ = node;
    }
    public TOpenbrace GetOpenbrace ()
    {
        return _openbrace_;
    }

    public void SetOpenbrace (TOpenbrace node)
    {
        if(_openbrace_ != null)
        {
            _openbrace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openbrace_ = node;
    }
    public PLinesOfCode GetLinesOfCode ()
    {
        return _lines_of_code_;
    }

    public void SetLinesOfCode (PLinesOfCode node)
    {
        if(_lines_of_code_ != null)
        {
            _lines_of_code_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lines_of_code_ = node;
    }
    public TClosebrace GetClosebrace ()
    {
        return _closebrace_;
    }

    public void SetClosebrace (TClosebrace node)
    {
        if(_closebrace_ != null)
        {
            _closebrace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closebrace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_main_)
            + ToString (_openbrace_)
            + ToString (_lines_of_code_)
            + ToString (_closebrace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _main_ == child )
        {
            _main_ = null;
            return;
        }
        if ( _openbrace_ == child )
        {
            _openbrace_ = null;
            return;
        }
        if ( _lines_of_code_ == child )
        {
            _lines_of_code_ = null;
            return;
        }
        if ( _closebrace_ == child )
        {
            _closebrace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _main_ == oldChild )
        {
            SetMain ((TMain) newChild);
            return;
        }
        if ( _openbrace_ == oldChild )
        {
            SetOpenbrace ((TOpenbrace) newChild);
            return;
        }
        if ( _lines_of_code_ == oldChild )
        {
            SetLinesOfCode ((PLinesOfCode) newChild);
            return;
        }
        if ( _closebrace_ == oldChild )
        {
            SetClosebrace ((TClosebrace) newChild);
            return;
        }
    }

}
public sealed class ALinesLinesOfCode : PLinesOfCode
{
    private PLinesOfCode _lines_of_code_;
    private PLineOfCode _line_of_code_;

    public ALinesLinesOfCode ()
    {
    }

    public ALinesLinesOfCode (
            PLinesOfCode _lines_of_code_,
            PLineOfCode _line_of_code_
    )
    {
        SetLinesOfCode (_lines_of_code_);
        SetLineOfCode (_line_of_code_);
    }

    public override Object Clone()
    {
        return new ALinesLinesOfCode (
            (PLinesOfCode)CloneNode (_lines_of_code_),
            (PLineOfCode)CloneNode (_line_of_code_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALinesLinesOfCode(this);
    }

    public PLinesOfCode GetLinesOfCode ()
    {
        return _lines_of_code_;
    }

    public void SetLinesOfCode (PLinesOfCode node)
    {
        if(_lines_of_code_ != null)
        {
            _lines_of_code_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lines_of_code_ = node;
    }
    public PLineOfCode GetLineOfCode ()
    {
        return _line_of_code_;
    }

    public void SetLineOfCode (PLineOfCode node)
    {
        if(_line_of_code_ != null)
        {
            _line_of_code_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _line_of_code_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lines_of_code_)
            + ToString (_line_of_code_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lines_of_code_ == child )
        {
            _lines_of_code_ = null;
            return;
        }
        if ( _line_of_code_ == child )
        {
            _line_of_code_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lines_of_code_ == oldChild )
        {
            SetLinesOfCode ((PLinesOfCode) newChild);
            return;
        }
        if ( _line_of_code_ == oldChild )
        {
            SetLineOfCode ((PLineOfCode) newChild);
            return;
        }
    }

}
public sealed class ALineLinesOfCode : PLinesOfCode
{
    private PLineOfCode _line_of_code_;

    public ALineLinesOfCode ()
    {
    }

    public ALineLinesOfCode (
            PLineOfCode _line_of_code_
    )
    {
        SetLineOfCode (_line_of_code_);
    }

    public override Object Clone()
    {
        return new ALineLinesOfCode (
            (PLineOfCode)CloneNode (_line_of_code_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALineLinesOfCode(this);
    }

    public PLineOfCode GetLineOfCode ()
    {
        return _line_of_code_;
    }

    public void SetLineOfCode (PLineOfCode node)
    {
        if(_line_of_code_ != null)
        {
            _line_of_code_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _line_of_code_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_line_of_code_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _line_of_code_ == child )
        {
            _line_of_code_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _line_of_code_ == oldChild )
        {
            SetLineOfCode ((PLineOfCode) newChild);
            return;
        }
    }

}
public sealed class ADeclLineOfCode : PLineOfCode
{
    private PDeclarationLine _declaration_line_;

    public ADeclLineOfCode ()
    {
    }

    public ADeclLineOfCode (
            PDeclarationLine _declaration_line_
    )
    {
        SetDeclarationLine (_declaration_line_);
    }

    public override Object Clone()
    {
        return new ADeclLineOfCode (
            (PDeclarationLine)CloneNode (_declaration_line_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclLineOfCode(this);
    }

    public PDeclarationLine GetDeclarationLine ()
    {
        return _declaration_line_;
    }

    public void SetDeclarationLine (PDeclarationLine node)
    {
        if(_declaration_line_ != null)
        {
            _declaration_line_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declaration_line_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_declaration_line_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _declaration_line_ == child )
        {
            _declaration_line_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _declaration_line_ == oldChild )
        {
            SetDeclarationLine ((PDeclarationLine) newChild);
            return;
        }
    }

}
public sealed class AAssignLineOfCode : PLineOfCode
{
    private PAssignmentLine _assignment_line_;

    public AAssignLineOfCode ()
    {
    }

    public AAssignLineOfCode (
            PAssignmentLine _assignment_line_
    )
    {
        SetAssignmentLine (_assignment_line_);
    }

    public override Object Clone()
    {
        return new AAssignLineOfCode (
            (PAssignmentLine)CloneNode (_assignment_line_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignLineOfCode(this);
    }

    public PAssignmentLine GetAssignmentLine ()
    {
        return _assignment_line_;
    }

    public void SetAssignmentLine (PAssignmentLine node)
    {
        if(_assignment_line_ != null)
        {
            _assignment_line_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignment_line_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_assignment_line_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _assignment_line_ == child )
        {
            _assignment_line_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _assignment_line_ == oldChild )
        {
            SetAssignmentLine ((PAssignmentLine) newChild);
            return;
        }
    }

}
public sealed class AFunctionCallLineOfCode : PLineOfCode
{
    private PFunctionCallLine _function_call_line_;

    public AFunctionCallLineOfCode ()
    {
    }

    public AFunctionCallLineOfCode (
            PFunctionCallLine _function_call_line_
    )
    {
        SetFunctionCallLine (_function_call_line_);
    }

    public override Object Clone()
    {
        return new AFunctionCallLineOfCode (
            (PFunctionCallLine)CloneNode (_function_call_line_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunctionCallLineOfCode(this);
    }

    public PFunctionCallLine GetFunctionCallLine ()
    {
        return _function_call_line_;
    }

    public void SetFunctionCallLine (PFunctionCallLine node)
    {
        if(_function_call_line_ != null)
        {
            _function_call_line_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_call_line_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_function_call_line_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _function_call_line_ == child )
        {
            _function_call_line_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _function_call_line_ == oldChild )
        {
            SetFunctionCallLine ((PFunctionCallLine) newChild);
            return;
        }
    }

}
public sealed class AIfelseLineOfCode : PLineOfCode
{
    private PIfLine _if_line_;

    public AIfelseLineOfCode ()
    {
    }

    public AIfelseLineOfCode (
            PIfLine _if_line_
    )
    {
        SetIfLine (_if_line_);
    }

    public override Object Clone()
    {
        return new AIfelseLineOfCode (
            (PIfLine)CloneNode (_if_line_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfelseLineOfCode(this);
    }

    public PIfLine GetIfLine ()
    {
        return _if_line_;
    }

    public void SetIfLine (PIfLine node)
    {
        if(_if_line_ != null)
        {
            _if_line_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_line_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_line_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_line_ == child )
        {
            _if_line_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_line_ == oldChild )
        {
            SetIfLine ((PIfLine) newChild);
            return;
        }
    }

}
public sealed class AWhileLineOfCode : PLineOfCode
{
    private PWhileLine _while_line_;

    public AWhileLineOfCode ()
    {
    }

    public AWhileLineOfCode (
            PWhileLine _while_line_
    )
    {
        SetWhileLine (_while_line_);
    }

    public override Object Clone()
    {
        return new AWhileLineOfCode (
            (PWhileLine)CloneNode (_while_line_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhileLineOfCode(this);
    }

    public PWhileLine GetWhileLine ()
    {
        return _while_line_;
    }

    public void SetWhileLine (PWhileLine node)
    {
        if(_while_line_ != null)
        {
            _while_line_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _while_line_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_while_line_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _while_line_ == child )
        {
            _while_line_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _while_line_ == oldChild )
        {
            SetWhileLine ((PWhileLine) newChild);
            return;
        }
    }

}
public sealed class ADeclarationLine : PDeclarationLine
{
    private TId _type_;
    private TId _var_name_;
    private TEol _eol_;

    public ADeclarationLine ()
    {
    }

    public ADeclarationLine (
            TId _type_,
            TId _var_name_,
            TEol _eol_
    )
    {
        SetType (_type_);
        SetVarName (_var_name_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new ADeclarationLine (
            (TId)CloneNode (_type_),
            (TId)CloneNode (_var_name_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclarationLine(this);
    }

    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetVarName ()
    {
        return _var_name_;
    }

    public void SetVarName (TId node)
    {
        if(_var_name_ != null)
        {
            _var_name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_name_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_var_name_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _var_name_ == child )
        {
            _var_name_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _var_name_ == oldChild )
        {
            SetVarName ((TId) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AAssignmentLine : PAssignmentLine
{
    private TId _id_;
    private TAssign _assign_;
    private PAdditionExpr _addition_expr_;
    private TEol _eol_;

    public AAssignmentLine ()
    {
    }

    public AAssignmentLine (
            TId _id_,
            TAssign _assign_,
            PAdditionExpr _addition_expr_,
            TEol _eol_
    )
    {
        SetId (_id_);
        SetAssign (_assign_);
        SetAdditionExpr (_addition_expr_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AAssignmentLine (
            (TId)CloneNode (_id_),
            (TAssign)CloneNode (_assign_),
            (PAdditionExpr)CloneNode (_addition_expr_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignmentLine(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public PAdditionExpr GetAdditionExpr ()
    {
        return _addition_expr_;
    }

    public void SetAdditionExpr (PAdditionExpr node)
    {
        if(_addition_expr_ != null)
        {
            _addition_expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _addition_expr_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_assign_)
            + ToString (_addition_expr_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _addition_expr_ == child )
        {
            _addition_expr_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _addition_expr_ == oldChild )
        {
            SetAdditionExpr ((PAdditionExpr) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AFunctionCallLine : PFunctionCallLine
{
    private TId _id_;
    private TOpenpar _openpar_;
    private PActualParameters _actual_parameters_;
    private TClosepar _closepar_;
    private TEol _eol_;

    public AFunctionCallLine ()
    {
    }

    public AFunctionCallLine (
            TId _id_,
            TOpenpar _openpar_,
            PActualParameters _actual_parameters_,
            TClosepar _closepar_,
            TEol _eol_
    )
    {
        SetId (_id_);
        SetOpenpar (_openpar_);
        SetActualParameters (_actual_parameters_);
        SetClosepar (_closepar_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AFunctionCallLine (
            (TId)CloneNode (_id_),
            (TOpenpar)CloneNode (_openpar_),
            (PActualParameters)CloneNode (_actual_parameters_),
            (TClosepar)CloneNode (_closepar_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunctionCallLine(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TOpenpar GetOpenpar ()
    {
        return _openpar_;
    }

    public void SetOpenpar (TOpenpar node)
    {
        if(_openpar_ != null)
        {
            _openpar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openpar_ = node;
    }
    public PActualParameters GetActualParameters ()
    {
        return _actual_parameters_;
    }

    public void SetActualParameters (PActualParameters node)
    {
        if(_actual_parameters_ != null)
        {
            _actual_parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _actual_parameters_ = node;
    }
    public TClosepar GetClosepar ()
    {
        return _closepar_;
    }

    public void SetClosepar (TClosepar node)
    {
        if(_closepar_ != null)
        {
            _closepar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closepar_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_openpar_)
            + ToString (_actual_parameters_)
            + ToString (_closepar_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _openpar_ == child )
        {
            _openpar_ = null;
            return;
        }
        if ( _actual_parameters_ == child )
        {
            _actual_parameters_ = null;
            return;
        }
        if ( _closepar_ == child )
        {
            _closepar_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _openpar_ == oldChild )
        {
            SetOpenpar ((TOpenpar) newChild);
            return;
        }
        if ( _actual_parameters_ == oldChild )
        {
            SetActualParameters ((PActualParameters) newChild);
            return;
        }
        if ( _closepar_ == oldChild )
        {
            SetClosepar ((TClosepar) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AMultipleActualParameters : PActualParameters
{
    private PActualParameter _actual_parameter_;
    private TComma _comma_;
    private PActualParameters _actual_parameters_;

    public AMultipleActualParameters ()
    {
    }

    public AMultipleActualParameters (
            PActualParameter _actual_parameter_,
            TComma _comma_,
            PActualParameters _actual_parameters_
    )
    {
        SetActualParameter (_actual_parameter_);
        SetComma (_comma_);
        SetActualParameters (_actual_parameters_);
    }

    public override Object Clone()
    {
        return new AMultipleActualParameters (
            (PActualParameter)CloneNode (_actual_parameter_),
            (TComma)CloneNode (_comma_),
            (PActualParameters)CloneNode (_actual_parameters_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleActualParameters(this);
    }

    public PActualParameter GetActualParameter ()
    {
        return _actual_parameter_;
    }

    public void SetActualParameter (PActualParameter node)
    {
        if(_actual_parameter_ != null)
        {
            _actual_parameter_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _actual_parameter_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PActualParameters GetActualParameters ()
    {
        return _actual_parameters_;
    }

    public void SetActualParameters (PActualParameters node)
    {
        if(_actual_parameters_ != null)
        {
            _actual_parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _actual_parameters_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_actual_parameter_)
            + ToString (_comma_)
            + ToString (_actual_parameters_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _actual_parameter_ == child )
        {
            _actual_parameter_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _actual_parameters_ == child )
        {
            _actual_parameters_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _actual_parameter_ == oldChild )
        {
            SetActualParameter ((PActualParameter) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _actual_parameters_ == oldChild )
        {
            SetActualParameters ((PActualParameters) newChild);
            return;
        }
    }

}
public sealed class ALastActualParameters : PActualParameters
{
    private PActualParameter _actual_parameter_;

    public ALastActualParameters ()
    {
    }

    public ALastActualParameters (
            PActualParameter _actual_parameter_
    )
    {
        SetActualParameter (_actual_parameter_);
    }

    public override Object Clone()
    {
        return new ALastActualParameters (
            (PActualParameter)CloneNode (_actual_parameter_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALastActualParameters(this);
    }

    public PActualParameter GetActualParameter ()
    {
        return _actual_parameter_;
    }

    public void SetActualParameter (PActualParameter node)
    {
        if(_actual_parameter_ != null)
        {
            _actual_parameter_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _actual_parameter_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_actual_parameter_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _actual_parameter_ == child )
        {
            _actual_parameter_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _actual_parameter_ == oldChild )
        {
            SetActualParameter ((PActualParameter) newChild);
            return;
        }
    }

}
public sealed class ANoneActualParameters : PActualParameters
{


    public ANoneActualParameters (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneActualParameters (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneActualParameters(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AExprActualParameter : PActualParameter
{
    private PAdditionExpr _addition_expr_;

    public AExprActualParameter ()
    {
    }

    public AExprActualParameter (
            PAdditionExpr _addition_expr_
    )
    {
        SetAdditionExpr (_addition_expr_);
    }

    public override Object Clone()
    {
        return new AExprActualParameter (
            (PAdditionExpr)CloneNode (_addition_expr_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAExprActualParameter(this);
    }

    public PAdditionExpr GetAdditionExpr ()
    {
        return _addition_expr_;
    }

    public void SetAdditionExpr (PAdditionExpr node)
    {
        if(_addition_expr_ != null)
        {
            _addition_expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _addition_expr_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_addition_expr_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _addition_expr_ == child )
        {
            _addition_expr_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _addition_expr_ == oldChild )
        {
            SetAdditionExpr ((PAdditionExpr) newChild);
            return;
        }
    }

}
public sealed class AStringActualParameter : PActualParameter
{
    private TString _string_;

    public AStringActualParameter ()
    {
    }

    public AStringActualParameter (
            TString _string_
    )
    {
        SetString (_string_);
    }

    public override Object Clone()
    {
        return new AStringActualParameter (
            (TString)CloneNode (_string_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringActualParameter(this);
    }

    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_string_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
    }

}
public sealed class AWhileLine : PWhileLine
{
    private TWhile _while_;
    private TOpenpar _openpar_;
    private PCondition _condition_;
    private TClosepar _closepar_;
    private TOpenbrace _openbrace_;
    private PLinesOfCode _lines_of_code_;
    private TClosebrace _closebrace_;

    public AWhileLine ()
    {
    }

    public AWhileLine (
            TWhile _while_,
            TOpenpar _openpar_,
            PCondition _condition_,
            TClosepar _closepar_,
            TOpenbrace _openbrace_,
            PLinesOfCode _lines_of_code_,
            TClosebrace _closebrace_
    )
    {
        SetWhile (_while_);
        SetOpenpar (_openpar_);
        SetCondition (_condition_);
        SetClosepar (_closepar_);
        SetOpenbrace (_openbrace_);
        SetLinesOfCode (_lines_of_code_);
        SetClosebrace (_closebrace_);
    }

    public override Object Clone()
    {
        return new AWhileLine (
            (TWhile)CloneNode (_while_),
            (TOpenpar)CloneNode (_openpar_),
            (PCondition)CloneNode (_condition_),
            (TClosepar)CloneNode (_closepar_),
            (TOpenbrace)CloneNode (_openbrace_),
            (PLinesOfCode)CloneNode (_lines_of_code_),
            (TClosebrace)CloneNode (_closebrace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhileLine(this);
    }

    public TWhile GetWhile ()
    {
        return _while_;
    }

    public void SetWhile (TWhile node)
    {
        if(_while_ != null)
        {
            _while_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _while_ = node;
    }
    public TOpenpar GetOpenpar ()
    {
        return _openpar_;
    }

    public void SetOpenpar (TOpenpar node)
    {
        if(_openpar_ != null)
        {
            _openpar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openpar_ = node;
    }
    public PCondition GetCondition ()
    {
        return _condition_;
    }

    public void SetCondition (PCondition node)
    {
        if(_condition_ != null)
        {
            _condition_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _condition_ = node;
    }
    public TClosepar GetClosepar ()
    {
        return _closepar_;
    }

    public void SetClosepar (TClosepar node)
    {
        if(_closepar_ != null)
        {
            _closepar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closepar_ = node;
    }
    public TOpenbrace GetOpenbrace ()
    {
        return _openbrace_;
    }

    public void SetOpenbrace (TOpenbrace node)
    {
        if(_openbrace_ != null)
        {
            _openbrace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openbrace_ = node;
    }
    public PLinesOfCode GetLinesOfCode ()
    {
        return _lines_of_code_;
    }

    public void SetLinesOfCode (PLinesOfCode node)
    {
        if(_lines_of_code_ != null)
        {
            _lines_of_code_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lines_of_code_ = node;
    }
    public TClosebrace GetClosebrace ()
    {
        return _closebrace_;
    }

    public void SetClosebrace (TClosebrace node)
    {
        if(_closebrace_ != null)
        {
            _closebrace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closebrace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_while_)
            + ToString (_openpar_)
            + ToString (_condition_)
            + ToString (_closepar_)
            + ToString (_openbrace_)
            + ToString (_lines_of_code_)
            + ToString (_closebrace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _while_ == child )
        {
            _while_ = null;
            return;
        }
        if ( _openpar_ == child )
        {
            _openpar_ = null;
            return;
        }
        if ( _condition_ == child )
        {
            _condition_ = null;
            return;
        }
        if ( _closepar_ == child )
        {
            _closepar_ = null;
            return;
        }
        if ( _openbrace_ == child )
        {
            _openbrace_ = null;
            return;
        }
        if ( _lines_of_code_ == child )
        {
            _lines_of_code_ = null;
            return;
        }
        if ( _closebrace_ == child )
        {
            _closebrace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _while_ == oldChild )
        {
            SetWhile ((TWhile) newChild);
            return;
        }
        if ( _openpar_ == oldChild )
        {
            SetOpenpar ((TOpenpar) newChild);
            return;
        }
        if ( _condition_ == oldChild )
        {
            SetCondition ((PCondition) newChild);
            return;
        }
        if ( _closepar_ == oldChild )
        {
            SetClosepar ((TClosepar) newChild);
            return;
        }
        if ( _openbrace_ == oldChild )
        {
            SetOpenbrace ((TOpenbrace) newChild);
            return;
        }
        if ( _lines_of_code_ == oldChild )
        {
            SetLinesOfCode ((PLinesOfCode) newChild);
            return;
        }
        if ( _closebrace_ == oldChild )
        {
            SetClosebrace ((TClosebrace) newChild);
            return;
        }
    }

}
public sealed class ANoelseIfLine : PIfLine
{
    private TIf _if_;
    private TOpenpar _openpar_;
    private PCondition _condition_;
    private TClosepar _closepar_;
    private TOpenbrace _openbrace_;
    private PLinesOfCode _lines_of_code_;
    private TClosebrace _closebrace_;

    public ANoelseIfLine ()
    {
    }

    public ANoelseIfLine (
            TIf _if_,
            TOpenpar _openpar_,
            PCondition _condition_,
            TClosepar _closepar_,
            TOpenbrace _openbrace_,
            PLinesOfCode _lines_of_code_,
            TClosebrace _closebrace_
    )
    {
        SetIf (_if_);
        SetOpenpar (_openpar_);
        SetCondition (_condition_);
        SetClosepar (_closepar_);
        SetOpenbrace (_openbrace_);
        SetLinesOfCode (_lines_of_code_);
        SetClosebrace (_closebrace_);
    }

    public override Object Clone()
    {
        return new ANoelseIfLine (
            (TIf)CloneNode (_if_),
            (TOpenpar)CloneNode (_openpar_),
            (PCondition)CloneNode (_condition_),
            (TClosepar)CloneNode (_closepar_),
            (TOpenbrace)CloneNode (_openbrace_),
            (PLinesOfCode)CloneNode (_lines_of_code_),
            (TClosebrace)CloneNode (_closebrace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoelseIfLine(this);
    }

    public TIf GetIf ()
    {
        return _if_;
    }

    public void SetIf (TIf node)
    {
        if(_if_ != null)
        {
            _if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_ = node;
    }
    public TOpenpar GetOpenpar ()
    {
        return _openpar_;
    }

    public void SetOpenpar (TOpenpar node)
    {
        if(_openpar_ != null)
        {
            _openpar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openpar_ = node;
    }
    public PCondition GetCondition ()
    {
        return _condition_;
    }

    public void SetCondition (PCondition node)
    {
        if(_condition_ != null)
        {
            _condition_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _condition_ = node;
    }
    public TClosepar GetClosepar ()
    {
        return _closepar_;
    }

    public void SetClosepar (TClosepar node)
    {
        if(_closepar_ != null)
        {
            _closepar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closepar_ = node;
    }
    public TOpenbrace GetOpenbrace ()
    {
        return _openbrace_;
    }

    public void SetOpenbrace (TOpenbrace node)
    {
        if(_openbrace_ != null)
        {
            _openbrace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openbrace_ = node;
    }
    public PLinesOfCode GetLinesOfCode ()
    {
        return _lines_of_code_;
    }

    public void SetLinesOfCode (PLinesOfCode node)
    {
        if(_lines_of_code_ != null)
        {
            _lines_of_code_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lines_of_code_ = node;
    }
    public TClosebrace GetClosebrace ()
    {
        return _closebrace_;
    }

    public void SetClosebrace (TClosebrace node)
    {
        if(_closebrace_ != null)
        {
            _closebrace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closebrace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_)
            + ToString (_openpar_)
            + ToString (_condition_)
            + ToString (_closepar_)
            + ToString (_openbrace_)
            + ToString (_lines_of_code_)
            + ToString (_closebrace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_ == child )
        {
            _if_ = null;
            return;
        }
        if ( _openpar_ == child )
        {
            _openpar_ = null;
            return;
        }
        if ( _condition_ == child )
        {
            _condition_ = null;
            return;
        }
        if ( _closepar_ == child )
        {
            _closepar_ = null;
            return;
        }
        if ( _openbrace_ == child )
        {
            _openbrace_ = null;
            return;
        }
        if ( _lines_of_code_ == child )
        {
            _lines_of_code_ = null;
            return;
        }
        if ( _closebrace_ == child )
        {
            _closebrace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_ == oldChild )
        {
            SetIf ((TIf) newChild);
            return;
        }
        if ( _openpar_ == oldChild )
        {
            SetOpenpar ((TOpenpar) newChild);
            return;
        }
        if ( _condition_ == oldChild )
        {
            SetCondition ((PCondition) newChild);
            return;
        }
        if ( _closepar_ == oldChild )
        {
            SetClosepar ((TClosepar) newChild);
            return;
        }
        if ( _openbrace_ == oldChild )
        {
            SetOpenbrace ((TOpenbrace) newChild);
            return;
        }
        if ( _lines_of_code_ == oldChild )
        {
            SetLinesOfCode ((PLinesOfCode) newChild);
            return;
        }
        if ( _closebrace_ == oldChild )
        {
            SetClosebrace ((TClosebrace) newChild);
            return;
        }
    }

}
public sealed class AElseIfLine : PIfLine
{
    private TIf _if_;
    private TOpenpar _openpar_;
    private PCondition _condition_;
    private TClosepar _closepar_;
    private TOpenbrace _openbrace_;
    private PLinesOfCode _lines_of_code_;
    private TClosebrace _closebrace_;
    private PElseLine _else_line_;

    public AElseIfLine ()
    {
    }

    public AElseIfLine (
            TIf _if_,
            TOpenpar _openpar_,
            PCondition _condition_,
            TClosepar _closepar_,
            TOpenbrace _openbrace_,
            PLinesOfCode _lines_of_code_,
            TClosebrace _closebrace_,
            PElseLine _else_line_
    )
    {
        SetIf (_if_);
        SetOpenpar (_openpar_);
        SetCondition (_condition_);
        SetClosepar (_closepar_);
        SetOpenbrace (_openbrace_);
        SetLinesOfCode (_lines_of_code_);
        SetClosebrace (_closebrace_);
        SetElseLine (_else_line_);
    }

    public override Object Clone()
    {
        return new AElseIfLine (
            (TIf)CloneNode (_if_),
            (TOpenpar)CloneNode (_openpar_),
            (PCondition)CloneNode (_condition_),
            (TClosepar)CloneNode (_closepar_),
            (TOpenbrace)CloneNode (_openbrace_),
            (PLinesOfCode)CloneNode (_lines_of_code_),
            (TClosebrace)CloneNode (_closebrace_),
            (PElseLine)CloneNode (_else_line_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAElseIfLine(this);
    }

    public TIf GetIf ()
    {
        return _if_;
    }

    public void SetIf (TIf node)
    {
        if(_if_ != null)
        {
            _if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_ = node;
    }
    public TOpenpar GetOpenpar ()
    {
        return _openpar_;
    }

    public void SetOpenpar (TOpenpar node)
    {
        if(_openpar_ != null)
        {
            _openpar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openpar_ = node;
    }
    public PCondition GetCondition ()
    {
        return _condition_;
    }

    public void SetCondition (PCondition node)
    {
        if(_condition_ != null)
        {
            _condition_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _condition_ = node;
    }
    public TClosepar GetClosepar ()
    {
        return _closepar_;
    }

    public void SetClosepar (TClosepar node)
    {
        if(_closepar_ != null)
        {
            _closepar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closepar_ = node;
    }
    public TOpenbrace GetOpenbrace ()
    {
        return _openbrace_;
    }

    public void SetOpenbrace (TOpenbrace node)
    {
        if(_openbrace_ != null)
        {
            _openbrace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openbrace_ = node;
    }
    public PLinesOfCode GetLinesOfCode ()
    {
        return _lines_of_code_;
    }

    public void SetLinesOfCode (PLinesOfCode node)
    {
        if(_lines_of_code_ != null)
        {
            _lines_of_code_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lines_of_code_ = node;
    }
    public TClosebrace GetClosebrace ()
    {
        return _closebrace_;
    }

    public void SetClosebrace (TClosebrace node)
    {
        if(_closebrace_ != null)
        {
            _closebrace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closebrace_ = node;
    }
    public PElseLine GetElseLine ()
    {
        return _else_line_;
    }

    public void SetElseLine (PElseLine node)
    {
        if(_else_line_ != null)
        {
            _else_line_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_line_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_)
            + ToString (_openpar_)
            + ToString (_condition_)
            + ToString (_closepar_)
            + ToString (_openbrace_)
            + ToString (_lines_of_code_)
            + ToString (_closebrace_)
            + ToString (_else_line_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_ == child )
        {
            _if_ = null;
            return;
        }
        if ( _openpar_ == child )
        {
            _openpar_ = null;
            return;
        }
        if ( _condition_ == child )
        {
            _condition_ = null;
            return;
        }
        if ( _closepar_ == child )
        {
            _closepar_ = null;
            return;
        }
        if ( _openbrace_ == child )
        {
            _openbrace_ = null;
            return;
        }
        if ( _lines_of_code_ == child )
        {
            _lines_of_code_ = null;
            return;
        }
        if ( _closebrace_ == child )
        {
            _closebrace_ = null;
            return;
        }
        if ( _else_line_ == child )
        {
            _else_line_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_ == oldChild )
        {
            SetIf ((TIf) newChild);
            return;
        }
        if ( _openpar_ == oldChild )
        {
            SetOpenpar ((TOpenpar) newChild);
            return;
        }
        if ( _condition_ == oldChild )
        {
            SetCondition ((PCondition) newChild);
            return;
        }
        if ( _closepar_ == oldChild )
        {
            SetClosepar ((TClosepar) newChild);
            return;
        }
        if ( _openbrace_ == oldChild )
        {
            SetOpenbrace ((TOpenbrace) newChild);
            return;
        }
        if ( _lines_of_code_ == oldChild )
        {
            SetLinesOfCode ((PLinesOfCode) newChild);
            return;
        }
        if ( _closebrace_ == oldChild )
        {
            SetClosebrace ((TClosebrace) newChild);
            return;
        }
        if ( _else_line_ == oldChild )
        {
            SetElseLine ((PElseLine) newChild);
            return;
        }
    }

}
public sealed class AElseLine : PElseLine
{
    private TElse _else_;
    private TOpenbrace _openbrace_;
    private PLinesOfCode _lines_of_code_;
    private TClosebrace _closebrace_;

    public AElseLine ()
    {
    }

    public AElseLine (
            TElse _else_,
            TOpenbrace _openbrace_,
            PLinesOfCode _lines_of_code_,
            TClosebrace _closebrace_
    )
    {
        SetElse (_else_);
        SetOpenbrace (_openbrace_);
        SetLinesOfCode (_lines_of_code_);
        SetClosebrace (_closebrace_);
    }

    public override Object Clone()
    {
        return new AElseLine (
            (TElse)CloneNode (_else_),
            (TOpenbrace)CloneNode (_openbrace_),
            (PLinesOfCode)CloneNode (_lines_of_code_),
            (TClosebrace)CloneNode (_closebrace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAElseLine(this);
    }

    public TElse GetElse ()
    {
        return _else_;
    }

    public void SetElse (TElse node)
    {
        if(_else_ != null)
        {
            _else_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_ = node;
    }
    public TOpenbrace GetOpenbrace ()
    {
        return _openbrace_;
    }

    public void SetOpenbrace (TOpenbrace node)
    {
        if(_openbrace_ != null)
        {
            _openbrace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openbrace_ = node;
    }
    public PLinesOfCode GetLinesOfCode ()
    {
        return _lines_of_code_;
    }

    public void SetLinesOfCode (PLinesOfCode node)
    {
        if(_lines_of_code_ != null)
        {
            _lines_of_code_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lines_of_code_ = node;
    }
    public TClosebrace GetClosebrace ()
    {
        return _closebrace_;
    }

    public void SetClosebrace (TClosebrace node)
    {
        if(_closebrace_ != null)
        {
            _closebrace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closebrace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_else_)
            + ToString (_openbrace_)
            + ToString (_lines_of_code_)
            + ToString (_closebrace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _else_ == child )
        {
            _else_ = null;
            return;
        }
        if ( _openbrace_ == child )
        {
            _openbrace_ = null;
            return;
        }
        if ( _lines_of_code_ == child )
        {
            _lines_of_code_ = null;
            return;
        }
        if ( _closebrace_ == child )
        {
            _closebrace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _else_ == oldChild )
        {
            SetElse ((TElse) newChild);
            return;
        }
        if ( _openbrace_ == oldChild )
        {
            SetOpenbrace ((TOpenbrace) newChild);
            return;
        }
        if ( _lines_of_code_ == oldChild )
        {
            SetLinesOfCode ((PLinesOfCode) newChild);
            return;
        }
        if ( _closebrace_ == oldChild )
        {
            SetClosebrace ((TClosebrace) newChild);
            return;
        }
    }

}
public sealed class ACondCondition : PCondition
{
    private PFirst _first_;
    private POperator _operator_;
    private PAdditionExpr _addition_expr_;
    private PMoreConditions _more_conditions_;
    private PCondition _condition_;

    public ACondCondition ()
    {
    }

    public ACondCondition (
            PFirst _first_,
            POperator _operator_,
            PAdditionExpr _addition_expr_,
            PMoreConditions _more_conditions_,
            PCondition _condition_
    )
    {
        SetFirst (_first_);
        SetOperator (_operator_);
        SetAdditionExpr (_addition_expr_);
        SetMoreConditions (_more_conditions_);
        SetCondition (_condition_);
    }

    public override Object Clone()
    {
        return new ACondCondition (
            (PFirst)CloneNode (_first_),
            (POperator)CloneNode (_operator_),
            (PAdditionExpr)CloneNode (_addition_expr_),
            (PMoreConditions)CloneNode (_more_conditions_),
            (PCondition)CloneNode (_condition_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACondCondition(this);
    }

    public PFirst GetFirst ()
    {
        return _first_;
    }

    public void SetFirst (PFirst node)
    {
        if(_first_ != null)
        {
            _first_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _first_ = node;
    }
    public POperator GetOperator ()
    {
        return _operator_;
    }

    public void SetOperator (POperator node)
    {
        if(_operator_ != null)
        {
            _operator_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operator_ = node;
    }
    public PAdditionExpr GetAdditionExpr ()
    {
        return _addition_expr_;
    }

    public void SetAdditionExpr (PAdditionExpr node)
    {
        if(_addition_expr_ != null)
        {
            _addition_expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _addition_expr_ = node;
    }
    public PMoreConditions GetMoreConditions ()
    {
        return _more_conditions_;
    }

    public void SetMoreConditions (PMoreConditions node)
    {
        if(_more_conditions_ != null)
        {
            _more_conditions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _more_conditions_ = node;
    }
    public PCondition GetCondition ()
    {
        return _condition_;
    }

    public void SetCondition (PCondition node)
    {
        if(_condition_ != null)
        {
            _condition_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _condition_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_first_)
            + ToString (_operator_)
            + ToString (_addition_expr_)
            + ToString (_more_conditions_)
            + ToString (_condition_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _first_ == child )
        {
            _first_ = null;
            return;
        }
        if ( _operator_ == child )
        {
            _operator_ = null;
            return;
        }
        if ( _addition_expr_ == child )
        {
            _addition_expr_ = null;
            return;
        }
        if ( _more_conditions_ == child )
        {
            _more_conditions_ = null;
            return;
        }
        if ( _condition_ == child )
        {
            _condition_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _first_ == oldChild )
        {
            SetFirst ((PFirst) newChild);
            return;
        }
        if ( _operator_ == oldChild )
        {
            SetOperator ((POperator) newChild);
            return;
        }
        if ( _addition_expr_ == oldChild )
        {
            SetAdditionExpr ((PAdditionExpr) newChild);
            return;
        }
        if ( _more_conditions_ == oldChild )
        {
            SetMoreConditions ((PMoreConditions) newChild);
            return;
        }
        if ( _condition_ == oldChild )
        {
            SetCondition ((PCondition) newChild);
            return;
        }
    }

}
public sealed class APassCondition : PCondition
{
    private PAdditionExpr _addition_expr_;

    public APassCondition ()
    {
    }

    public APassCondition (
            PAdditionExpr _addition_expr_
    )
    {
        SetAdditionExpr (_addition_expr_);
    }

    public override Object Clone()
    {
        return new APassCondition (
            (PAdditionExpr)CloneNode (_addition_expr_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassCondition(this);
    }

    public PAdditionExpr GetAdditionExpr ()
    {
        return _addition_expr_;
    }

    public void SetAdditionExpr (PAdditionExpr node)
    {
        if(_addition_expr_ != null)
        {
            _addition_expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _addition_expr_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_addition_expr_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _addition_expr_ == child )
        {
            _addition_expr_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _addition_expr_ == oldChild )
        {
            SetAdditionExpr ((PAdditionExpr) newChild);
            return;
        }
    }

}
public sealed class ANoneCondition : PCondition
{


    public ANoneCondition (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneCondition (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneCondition(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AFirst : PFirst
{
    private PAdditionExpr _addition_expr_;

    public AFirst ()
    {
    }

    public AFirst (
            PAdditionExpr _addition_expr_
    )
    {
        SetAdditionExpr (_addition_expr_);
    }

    public override Object Clone()
    {
        return new AFirst (
            (PAdditionExpr)CloneNode (_addition_expr_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFirst(this);
    }

    public PAdditionExpr GetAdditionExpr ()
    {
        return _addition_expr_;
    }

    public void SetAdditionExpr (PAdditionExpr node)
    {
        if(_addition_expr_ != null)
        {
            _addition_expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _addition_expr_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_addition_expr_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _addition_expr_ == child )
        {
            _addition_expr_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _addition_expr_ == oldChild )
        {
            SetAdditionExpr ((PAdditionExpr) newChild);
            return;
        }
    }

}
public sealed class AAndMoreConditions : PMoreConditions
{
    private TAnd _and_;

    public AAndMoreConditions ()
    {
    }

    public AAndMoreConditions (
            TAnd _and_
    )
    {
        SetAnd (_and_);
    }

    public override Object Clone()
    {
        return new AAndMoreConditions (
            (TAnd)CloneNode (_and_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAndMoreConditions(this);
    }

    public TAnd GetAnd ()
    {
        return _and_;
    }

    public void SetAnd (TAnd node)
    {
        if(_and_ != null)
        {
            _and_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _and_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_and_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _and_ == child )
        {
            _and_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _and_ == oldChild )
        {
            SetAnd ((TAnd) newChild);
            return;
        }
    }

}
public sealed class AOrMoreConditions : PMoreConditions
{
    private TOr _or_;

    public AOrMoreConditions ()
    {
    }

    public AOrMoreConditions (
            TOr _or_
    )
    {
        SetOr (_or_);
    }

    public override Object Clone()
    {
        return new AOrMoreConditions (
            (TOr)CloneNode (_or_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOrMoreConditions(this);
    }

    public TOr GetOr ()
    {
        return _or_;
    }

    public void SetOr (TOr node)
    {
        if(_or_ != null)
        {
            _or_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_or_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _or_ == child )
        {
            _or_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _or_ == oldChild )
        {
            SetOr ((TOr) newChild);
            return;
        }
    }

}
public sealed class ANoneMoreConditions : PMoreConditions
{


    public ANoneMoreConditions (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneMoreConditions (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneMoreConditions(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AEqOperator : POperator
{
    private TEqual _equal_;

    public AEqOperator ()
    {
    }

    public AEqOperator (
            TEqual _equal_
    )
    {
        SetEqual (_equal_);
    }

    public override Object Clone()
    {
        return new AEqOperator (
            (TEqual)CloneNode (_equal_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEqOperator(this);
    }

    public TEqual GetEqual ()
    {
        return _equal_;
    }

    public void SetEqual (TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equal_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_equal_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _equal_ == child )
        {
            _equal_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _equal_ == oldChild )
        {
            SetEqual ((TEqual) newChild);
            return;
        }
    }

}
public sealed class ANoteqOperator : POperator
{
    private TNot _not_;
    private TAssign _assign_;

    public ANoteqOperator ()
    {
    }

    public ANoteqOperator (
            TNot _not_,
            TAssign _assign_
    )
    {
        SetNot (_not_);
        SetAssign (_assign_);
    }

    public override Object Clone()
    {
        return new ANoteqOperator (
            (TNot)CloneNode (_not_),
            (TAssign)CloneNode (_assign_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoteqOperator(this);
    }

    public TNot GetNot ()
    {
        return _not_;
    }

    public void SetNot (TNot node)
    {
        if(_not_ != null)
        {
            _not_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _not_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_not_)
            + ToString (_assign_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _not_ == child )
        {
            _not_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _not_ == oldChild )
        {
            SetNot ((TNot) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
    }

}
public sealed class AGreaterOperator : POperator
{
    private TGreater _greater_;

    public AGreaterOperator ()
    {
    }

    public AGreaterOperator (
            TGreater _greater_
    )
    {
        SetGreater (_greater_);
    }

    public override Object Clone()
    {
        return new AGreaterOperator (
            (TGreater)CloneNode (_greater_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreaterOperator(this);
    }

    public TGreater GetGreater ()
    {
        return _greater_;
    }

    public void SetGreater (TGreater node)
    {
        if(_greater_ != null)
        {
            _greater_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _greater_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_greater_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _greater_ == child )
        {
            _greater_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _greater_ == oldChild )
        {
            SetGreater ((TGreater) newChild);
            return;
        }
    }

}
public sealed class ALessOperator : POperator
{
    private TLess _less_;

    public ALessOperator ()
    {
    }

    public ALessOperator (
            TLess _less_
    )
    {
        SetLess (_less_);
    }

    public override Object Clone()
    {
        return new ALessOperator (
            (TLess)CloneNode (_less_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALessOperator(this);
    }

    public TLess GetLess ()
    {
        return _less_;
    }

    public void SetLess (TLess node)
    {
        if(_less_ != null)
        {
            _less_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _less_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_less_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _less_ == child )
        {
            _less_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _less_ == oldChild )
        {
            SetLess ((TLess) newChild);
            return;
        }
    }

}
public sealed class AGreateqOperator : POperator
{
    private TGreateq _greateq_;

    public AGreateqOperator ()
    {
    }

    public AGreateqOperator (
            TGreateq _greateq_
    )
    {
        SetGreateq (_greateq_);
    }

    public override Object Clone()
    {
        return new AGreateqOperator (
            (TGreateq)CloneNode (_greateq_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreateqOperator(this);
    }

    public TGreateq GetGreateq ()
    {
        return _greateq_;
    }

    public void SetGreateq (TGreateq node)
    {
        if(_greateq_ != null)
        {
            _greateq_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _greateq_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_greateq_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _greateq_ == child )
        {
            _greateq_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _greateq_ == oldChild )
        {
            SetGreateq ((TGreateq) newChild);
            return;
        }
    }

}
public sealed class ALesseqOperator : POperator
{
    private TLesseq _lesseq_;

    public ALesseqOperator ()
    {
    }

    public ALesseqOperator (
            TLesseq _lesseq_
    )
    {
        SetLesseq (_lesseq_);
    }

    public override Object Clone()
    {
        return new ALesseqOperator (
            (TLesseq)CloneNode (_lesseq_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALesseqOperator(this);
    }

    public TLesseq GetLesseq ()
    {
        return _lesseq_;
    }

    public void SetLesseq (TLesseq node)
    {
        if(_lesseq_ != null)
        {
            _lesseq_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lesseq_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lesseq_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lesseq_ == child )
        {
            _lesseq_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lesseq_ == oldChild )
        {
            SetLesseq ((TLesseq) newChild);
            return;
        }
    }

}
public sealed class AAddAdditionExpr : PAdditionExpr
{
    private PAdditionExpr _addition_expr_;
    private TPlus _plus_;
    private PMultiExpr _multi_expr_;

    public AAddAdditionExpr ()
    {
    }

    public AAddAdditionExpr (
            PAdditionExpr _addition_expr_,
            TPlus _plus_,
            PMultiExpr _multi_expr_
    )
    {
        SetAdditionExpr (_addition_expr_);
        SetPlus (_plus_);
        SetMultiExpr (_multi_expr_);
    }

    public override Object Clone()
    {
        return new AAddAdditionExpr (
            (PAdditionExpr)CloneNode (_addition_expr_),
            (TPlus)CloneNode (_plus_),
            (PMultiExpr)CloneNode (_multi_expr_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAddAdditionExpr(this);
    }

    public PAdditionExpr GetAdditionExpr ()
    {
        return _addition_expr_;
    }

    public void SetAdditionExpr (PAdditionExpr node)
    {
        if(_addition_expr_ != null)
        {
            _addition_expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _addition_expr_ = node;
    }
    public TPlus GetPlus ()
    {
        return _plus_;
    }

    public void SetPlus (TPlus node)
    {
        if(_plus_ != null)
        {
            _plus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _plus_ = node;
    }
    public PMultiExpr GetMultiExpr ()
    {
        return _multi_expr_;
    }

    public void SetMultiExpr (PMultiExpr node)
    {
        if(_multi_expr_ != null)
        {
            _multi_expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _multi_expr_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_addition_expr_)
            + ToString (_plus_)
            + ToString (_multi_expr_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _addition_expr_ == child )
        {
            _addition_expr_ = null;
            return;
        }
        if ( _plus_ == child )
        {
            _plus_ = null;
            return;
        }
        if ( _multi_expr_ == child )
        {
            _multi_expr_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _addition_expr_ == oldChild )
        {
            SetAdditionExpr ((PAdditionExpr) newChild);
            return;
        }
        if ( _plus_ == oldChild )
        {
            SetPlus ((TPlus) newChild);
            return;
        }
        if ( _multi_expr_ == oldChild )
        {
            SetMultiExpr ((PMultiExpr) newChild);
            return;
        }
    }

}
public sealed class APassAdditionExpr : PAdditionExpr
{
    private PMultiExpr _multi_expr_;

    public APassAdditionExpr ()
    {
    }

    public APassAdditionExpr (
            PMultiExpr _multi_expr_
    )
    {
        SetMultiExpr (_multi_expr_);
    }

    public override Object Clone()
    {
        return new APassAdditionExpr (
            (PMultiExpr)CloneNode (_multi_expr_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassAdditionExpr(this);
    }

    public PMultiExpr GetMultiExpr ()
    {
        return _multi_expr_;
    }

    public void SetMultiExpr (PMultiExpr node)
    {
        if(_multi_expr_ != null)
        {
            _multi_expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _multi_expr_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_multi_expr_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _multi_expr_ == child )
        {
            _multi_expr_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _multi_expr_ == oldChild )
        {
            SetMultiExpr ((PMultiExpr) newChild);
            return;
        }
    }

}
public sealed class AMultiMultiExpr : PMultiExpr
{
    private PMultiExpr _multi_expr_;
    private TMult _mult_;
    private POperand _operand_;

    public AMultiMultiExpr ()
    {
    }

    public AMultiMultiExpr (
            PMultiExpr _multi_expr_,
            TMult _mult_,
            POperand _operand_
    )
    {
        SetMultiExpr (_multi_expr_);
        SetMult (_mult_);
        SetOperand (_operand_);
    }

    public override Object Clone()
    {
        return new AMultiMultiExpr (
            (PMultiExpr)CloneNode (_multi_expr_),
            (TMult)CloneNode (_mult_),
            (POperand)CloneNode (_operand_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultiMultiExpr(this);
    }

    public PMultiExpr GetMultiExpr ()
    {
        return _multi_expr_;
    }

    public void SetMultiExpr (PMultiExpr node)
    {
        if(_multi_expr_ != null)
        {
            _multi_expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _multi_expr_ = node;
    }
    public TMult GetMult ()
    {
        return _mult_;
    }

    public void SetMult (TMult node)
    {
        if(_mult_ != null)
        {
            _mult_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _mult_ = node;
    }
    public POperand GetOperand ()
    {
        return _operand_;
    }

    public void SetOperand (POperand node)
    {
        if(_operand_ != null)
        {
            _operand_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operand_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_multi_expr_)
            + ToString (_mult_)
            + ToString (_operand_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _multi_expr_ == child )
        {
            _multi_expr_ = null;
            return;
        }
        if ( _mult_ == child )
        {
            _mult_ = null;
            return;
        }
        if ( _operand_ == child )
        {
            _operand_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _multi_expr_ == oldChild )
        {
            SetMultiExpr ((PMultiExpr) newChild);
            return;
        }
        if ( _mult_ == oldChild )
        {
            SetMult ((TMult) newChild);
            return;
        }
        if ( _operand_ == oldChild )
        {
            SetOperand ((POperand) newChild);
            return;
        }
    }

}
public sealed class APassMultiExpr : PMultiExpr
{
    private POperand _operand_;

    public APassMultiExpr ()
    {
    }

    public APassMultiExpr (
            POperand _operand_
    )
    {
        SetOperand (_operand_);
    }

    public override Object Clone()
    {
        return new APassMultiExpr (
            (POperand)CloneNode (_operand_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassMultiExpr(this);
    }

    public POperand GetOperand ()
    {
        return _operand_;
    }

    public void SetOperand (POperand node)
    {
        if(_operand_ != null)
        {
            _operand_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operand_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_operand_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _operand_ == child )
        {
            _operand_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _operand_ == oldChild )
        {
            SetOperand ((POperand) newChild);
            return;
        }
    }

}
public sealed class AIntOperand : POperand
{
    private TInteger _integer_;

    public AIntOperand ()
    {
    }

    public AIntOperand (
            TInteger _integer_
    )
    {
        SetInteger (_integer_);
    }

    public override Object Clone()
    {
        return new AIntOperand (
            (TInteger)CloneNode (_integer_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntOperand(this);
    }

    public TInteger GetInteger ()
    {
        return _integer_;
    }

    public void SetInteger (TInteger node)
    {
        if(_integer_ != null)
        {
            _integer_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _integer_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_integer_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _integer_ == child )
        {
            _integer_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _integer_ == oldChild )
        {
            SetInteger ((TInteger) newChild);
            return;
        }
    }

}
public sealed class AFloatOperand : POperand
{
    private TFloating _floating_;

    public AFloatOperand ()
    {
    }

    public AFloatOperand (
            TFloating _floating_
    )
    {
        SetFloating (_floating_);
    }

    public override Object Clone()
    {
        return new AFloatOperand (
            (TFloating)CloneNode (_floating_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatOperand(this);
    }

    public TFloating GetFloating ()
    {
        return _floating_;
    }

    public void SetFloating (TFloating node)
    {
        if(_floating_ != null)
        {
            _floating_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _floating_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_floating_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _floating_ == child )
        {
            _floating_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _floating_ == oldChild )
        {
            SetFloating ((TFloating) newChild);
            return;
        }
    }

}
public sealed class AIdOperand : POperand
{
    private TId _id_;

    public AIdOperand ()
    {
    }

    public AIdOperand (
            TId _id_
    )
    {
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AIdOperand (
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIdOperand(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}
public sealed class AIntExpression : PExpression
{
    private TInteger _integer_;

    public AIntExpression ()
    {
    }

    public AIntExpression (
            TInteger _integer_
    )
    {
        SetInteger (_integer_);
    }

    public override Object Clone()
    {
        return new AIntExpression (
            (TInteger)CloneNode (_integer_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntExpression(this);
    }

    public TInteger GetInteger ()
    {
        return _integer_;
    }

    public void SetInteger (TInteger node)
    {
        if(_integer_ != null)
        {
            _integer_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _integer_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_integer_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _integer_ == child )
        {
            _integer_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _integer_ == oldChild )
        {
            SetInteger ((TInteger) newChild);
            return;
        }
    }

}
public sealed class AFloatExpression : PExpression
{
    private TFloating _floating_;

    public AFloatExpression ()
    {
    }

    public AFloatExpression (
            TFloating _floating_
    )
    {
        SetFloating (_floating_);
    }

    public override Object Clone()
    {
        return new AFloatExpression (
            (TFloating)CloneNode (_floating_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatExpression(this);
    }

    public TFloating GetFloating ()
    {
        return _floating_;
    }

    public void SetFloating (TFloating node)
    {
        if(_floating_ != null)
        {
            _floating_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _floating_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_floating_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _floating_ == child )
        {
            _floating_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _floating_ == oldChild )
        {
            SetFloating ((TFloating) newChild);
            return;
        }
    }

}
public sealed class AStringExpression : PExpression
{
    private TString _string_;

    public AStringExpression ()
    {
    }

    public AStringExpression (
            TString _string_
    )
    {
        SetString (_string_);
    }

    public override Object Clone()
    {
        return new AStringExpression (
            (TString)CloneNode (_string_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringExpression(this);
    }

    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_string_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PProgram _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PProgram _base_,
        EOF _eof_)
    {
        SetPProgram(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PProgram) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PProgram GetPProgram()
    {
        return _base_;
    }
    public void SetPProgram(PProgram node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPProgram((PProgram) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
